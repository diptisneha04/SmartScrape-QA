¶
Any keyword argument that's not recognized will be turned into a filter
that matches tags by their attributes.
If you pass in a value for an argument calledid, Beautiful Soup will
filter against each tag's 'id' attribute value:
id
id
soup.find_all(id='link2')# [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]
soup.find_all(id='link2')# [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]
soup.find_all(id='link2')# [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]

soup
.
find_all
(
id
=
'link2'
)
# [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]
Just as with tags, you can filter an attribute based ona string,a regular expression,a list,a function, orthe value True.
a string
a regular expression
a list
a function
the value True
If you pass in a regular expression object forhref, Beautiful Soup will
pattern-match against each tag's 'href' attribute value:
href
href
soup.find_all(href=re.compile("elsie"))# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
soup.find_all(href=re.compile("elsie"))# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
soup.find_all(href=re.compile("elsie"))# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]

soup
.
find_all
(
href
=
re
.
compile
(
"elsie"
))
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
The valueTruematches every tag that defines the attribute. This code
findsalltags with anidattribute:
True
True
all
id
id
soup.find_all(id=True)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all(id=True)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all(id=True)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup
.
find_all
(
id
=
True
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
For more complex matches, you can define a function that takes an attribute
value as its only argument. The function should returnTrueif the value
matches, andFalseotherwise.
True
True
False
False
Here's a function that finds allatags whosehrefattributedoes notmatch a regular expression:
a
a
href
href
does not
importredefnot_lacie(href):returnhrefandnotre.compile("lacie").search(href)soup.find_all(href=not_lacie)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
importredefnot_lacie(href):returnhrefandnotre.compile("lacie").search(href)soup.find_all(href=not_lacie)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
importredefnot_lacie(href):returnhrefandnotre.compile("lacie").search(href)soup.find_all(href=not_lacie)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

import
re
def
not_lacie
(
href
):
return
href
and
not
re
.
compile
(
"lacie"
)
.
search
(
href
)
soup
.
find_all
(
href
=
not_lacie
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
If you pass in a list for an argument, Beautiful Soup will look for an
attribute-value match againstanystring, regular expression, or function in
that list. This code finds the first and last link:
any
soup.find_all(id=["link1",re.compile("3$")])# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all(id=["link1",re.compile("3$")])# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all(id=["link1",re.compile("3$")])# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup
.
find_all
(
id
=
[
"link1"
,
re
.
compile
(
"3$"
)])
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
You can filter against multiple attributes at once by passing multiple
keyword arguments:
soup.find_all(href=re.compile("elsie"),id='link1')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
soup.find_all(href=re.compile("elsie"),id='link1')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
soup.find_all(href=re.compile("elsie"),id='link1')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]

soup
.
find_all
(
href
=
re
.
compile
(
"elsie"
),
id
=
'link1'
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]
Some attributes, like the data-* attributes in HTML 5, have names that
can't be used as the names of keyword arguments:
data_soup=BeautifulSoup('<div data-foo="value">foo!</div>','html.parser')data_soup.find_all(data-foo="value")# SyntaxError: keyword can't be an expression
data_soup=BeautifulSoup('<div data-foo="value">foo!</div>','html.parser')data_soup.find_all(data-foo="value")# SyntaxError: keyword can't be an expression
data_soup=BeautifulSoup('<div data-foo="value">foo!</div>','html.parser')data_soup.find_all(data-foo="value")# SyntaxError: keyword can't be an expression

data_soup
=
BeautifulSoup
(
'<div data-foo="value">foo!</div>'
,
'html.parser'
)
data_soup
.
find_all
(
data
-
foo
=
"value"
)
# SyntaxError: keyword can't be an expression
You can use these attributes in searches by putting them into a
dictionary and passing the dictionary intofind_all()as theattrsargument:
find_all()
find_all()
attrs
attrs
data_soup.find_all(attrs={"data-foo":"value"})# [<div data-foo="value">foo!</div>]
data_soup.find_all(attrs={"data-foo":"value"})# [<div data-foo="value">foo!</div>]
data_soup.find_all(attrs={"data-foo":"value"})# [<div data-foo="value">foo!</div>]

data_soup
.
find_all
(
attrs
=
{
"data-foo"
:
"value"
})
# [<div data-foo="value">foo!</div>]
Similarly, you can't use a keyword argument to search for HTML's 'name' attribute,
because Beautiful Soup uses thenameargument to contain the name
of the tag itself. Instead, you can give a value to 'name' in theattrsargument:
name
name
attrs
attrs
name_soup=BeautifulSoup('<input name="email"/>','html.parser')name_soup.find_all(name="email")# []name_soup.find_all(attrs={"name":"email"})# [<input name="email"/>]
name_soup=BeautifulSoup('<input name="email"/>','html.parser')name_soup.find_all(name="email")# []name_soup.find_all(attrs={"name":"email"})# [<input name="email"/>]
name_soup=BeautifulSoup('<input name="email"/>','html.parser')name_soup.find_all(name="email")# []name_soup.find_all(attrs={"name":"email"})# [<input name="email"/>]

name_soup
=
BeautifulSoup
(
'<input name="email"/>'
,
'html.parser'
)
name_soup
.
find_all
(
name
=
"email"
)
# []
name_soup
.
find_all
(
attrs
=
{
"name"
:
"email"
})
# [<input name="email"/>]
Searching by CSS class¶It's very useful to search for a tag that has a certain CSS class, but
the name of the CSS attribute, "class", is a reserved word in
Python. Usingclassas a keyword argument will give you a syntax
error. As of Beautiful Soup 4.1.2, you can search by CSS class using
the keyword argumentclass_:soup.find_all("a",class_="sister")# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]As with any keyword argument, you can passclass_a string, a regular
expression, a function, orTrue:soup.find_all(class_=re.compile("itl"))# [<p class="title"><b>The Dormouse's story</b></p>]defhas_six_characters(css_class):returncss_classisnotNoneandlen(css_class)==6soup.find_all(class_=has_six_characters)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]Rememberthat a single tag can have multiple
values for its "class" attribute. When you search for a tag that
matches a certain CSS class, you're matching againstanyof its CSS
classes:css_soup=BeautifulSoup('<p class="body strikeout"></p>','html.parser')css_soup.find_all("p",class_="strikeout")# [<p class="body strikeout"></p>]css_soup.find_all("p",class_="body")# [<p class="body strikeout"></p>]You can also search for the exact string value of theclassattribute:css_soup.find_all("p",class_="body strikeout")# [<p class="body strikeout"></p>]But searching for variants of the string value won't work:css_soup.find_all("p",class_="strikeout body")# []In older versions of Beautiful Soup, which don't have theclass_shortcut, you can use theattrsargument trick mentioned above.
Create a dictionary whose value for "class" is the string (or regular
expression, or whatever) you want to search for:soup.find_all("a",attrs={"class":"sister"})# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]To search for tags that match two or more CSS classes at once, use theTag.select()CSS selector methoddescribed here:css_soup.select("p.strikeout.body")# [<p class="body strikeout"></p>]
