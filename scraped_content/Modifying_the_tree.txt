¶
Beautiful Soup's main strength is in searching the parse tree, but you
can also modify the tree and write your changes as a new HTML or XML
document.
Changing tag names and attributes¶I covered this earlier, inTag.attrs, but it bears repeating. You
can rename a tag, change the values of its attributes, add new
attributes, and delete attributes:soup=BeautifulSoup('<b class="boldest">Extremely bold</b>','html.parser')tag=soup.btag.name="blockquote"tag['class']='verybold'tag['id']=1tag# <blockquote class="verybold" id="1">Extremely bold</blockquote>deltag['class']deltag['id']tag# <blockquote>Extremely bold</blockquote>
Changing tag names and attributes¶
¶
I covered this earlier, inTag.attrs, but it bears repeating. You
can rename a tag, change the values of its attributes, add new
attributes, and delete attributes:
Tag.attrs
Tag.attrs
Tag.attrs
soup=BeautifulSoup('<b class="boldest">Extremely bold</b>','html.parser')tag=soup.btag.name="blockquote"tag['class']='verybold'tag['id']=1tag# <blockquote class="verybold" id="1">Extremely bold</blockquote>deltag['class']deltag['id']tag# <blockquote>Extremely bold</blockquote>
soup=BeautifulSoup('<b class="boldest">Extremely bold</b>','html.parser')tag=soup.btag.name="blockquote"tag['class']='verybold'tag['id']=1tag# <blockquote class="verybold" id="1">Extremely bold</blockquote>deltag['class']deltag['id']tag# <blockquote>Extremely bold</blockquote>
soup=BeautifulSoup('<b class="boldest">Extremely bold</b>','html.parser')tag=soup.btag.name="blockquote"tag['class']='verybold'tag['id']=1tag# <blockquote class="verybold" id="1">Extremely bold</blockquote>deltag['class']deltag['id']tag# <blockquote>Extremely bold</blockquote>

soup
=
BeautifulSoup
(
'<b class="boldest">Extremely bold</b>'
,
'html.parser'
)
tag
=
soup
.
b
tag
.
name
=
"blockquote"
tag
[
'class'
]
=
'verybold'
tag
[
'id'
]
=
1
tag
# <blockquote class="verybold" id="1">Extremely bold</blockquote>
del
tag
[
'class'
]
del
tag
[
'id'
]
tag
# <blockquote>Extremely bold</blockquote>
Modifying.string¶If you set a tag's.stringattribute to a new string, the tag's contents are
replaced with that string:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.string="New link text."tag# <a href="http://example.com/">New link text.</a>Be careful: if the tag contained other tags, they and all their
contents will be destroyed.
Modifying.string¶
.string
.string
¶
If you set a tag's.stringattribute to a new string, the tag's contents are
replaced with that string:
.string
.string
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.string="New link text."tag# <a href="http://example.com/">New link text.</a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.string="New link text."tag# <a href="http://example.com/">New link text.</a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.string="New link text."tag# <a href="http://example.com/">New link text.</a>

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
tag
=
soup
.
a
tag
.
string
=
"New link text."
tag
# <a href="http://example.com/">New link text.</a>
Be careful: if the tag contained other tags, they and all their
contents will be destroyed.
append()¶You can add to a tag's contents withTag.append(). It works just
like calling.append()on a Python list:soup=BeautifulSoup("<a>Foo</a>",'html.parser')new_string=soup.a.append("Bar")soup# <a>FooBar</a>soup.a.contents# ['Foo', 'Bar']new_string# 'Bar'Tag.append()returns the newly appended element.
append()¶
append()
append()
¶
You can add to a tag's contents withTag.append(). It works just
like calling.append()on a Python list:
Tag.append()
Tag.append()
.append()
.append()
soup=BeautifulSoup("<a>Foo</a>",'html.parser')new_string=soup.a.append("Bar")soup# <a>FooBar</a>soup.a.contents# ['Foo', 'Bar']new_string# 'Bar'
soup=BeautifulSoup("<a>Foo</a>",'html.parser')new_string=soup.a.append("Bar")soup# <a>FooBar</a>soup.a.contents# ['Foo', 'Bar']new_string# 'Bar'
soup=BeautifulSoup("<a>Foo</a>",'html.parser')new_string=soup.a.append("Bar")soup# <a>FooBar</a>soup.a.contents# ['Foo', 'Bar']new_string# 'Bar'

soup
=
BeautifulSoup
(
"<a>Foo</a>"
,
'html.parser'
)
new_string
=
soup
.
a
.
append
(
"Bar"
)
soup
# <a>FooBar</a>
soup
.
a
.
contents
# ['Foo', 'Bar']
new_string
# 'Bar'
Tag.append()returns the newly appended element.
Tag.append()
Tag.append()
extend()¶Starting in Beautiful Soup 4.7.0,Tagalso supports a method
called.extend(), which adds every element of a list to aTag,
in order:soup=BeautifulSoup("<a>Soup</a>",'html.parser')soup.a.extend(["'s"," ","on"])soup# <a>Soup's on</a>soup.a.contents# ['Soup', ''s', ' ', 'on']Tag.extend()returns the list of appended elements.
extend()¶
extend()
extend()
¶
Starting in Beautiful Soup 4.7.0,Tagalso supports a method
called.extend(), which adds every element of a list to aTag,
in order:
Tag
Tag
Tag
.extend()
.extend()
Tag
Tag
Tag
soup=BeautifulSoup("<a>Soup</a>",'html.parser')soup.a.extend(["'s"," ","on"])soup# <a>Soup's on</a>soup.a.contents# ['Soup', ''s', ' ', 'on']
soup=BeautifulSoup("<a>Soup</a>",'html.parser')soup.a.extend(["'s"," ","on"])soup# <a>Soup's on</a>soup.a.contents# ['Soup', ''s', ' ', 'on']
soup=BeautifulSoup("<a>Soup</a>",'html.parser')soup.a.extend(["'s"," ","on"])soup# <a>Soup's on</a>soup.a.contents# ['Soup', ''s', ' ', 'on']

soup
=
BeautifulSoup
(
"<a>Soup</a>"
,
'html.parser'
)
soup
.
a
.
extend
([
"'s"
,
" "
,
"on"
])
soup
# <a>Soup's on</a>
soup
.
a
.
contents
# ['Soup', ''s', ' ', 'on']
Tag.extend()returns the list of appended elements.
Tag.extend()
Tag.extend()
NavigableString()and.new_tag()¶If you need to add a string to a document, no problem—you can pass a
Python string in toappend(), or you can call theNavigableStringconstructor:frombs4importNavigableStringsoup=BeautifulSoup("<b></b>",'html.parser')tag=soup.btag.append("Hello")new_string=NavigableString(" there")tag.append(new_string)tag# <b>Hello there.</b>tag.contents# ['Hello', ' there']If you want to create a comment or some other subclass ofNavigableString, just call the constructor:frombs4importCommentnew_comment=Comment("Nice to see you.")tag.append(new_comment)tag# <b>Hello there<!--Nice to see you.--></b>tag.contents# ['Hello', ' there', 'Nice to see you.'](This is a new feature in Beautiful Soup 4.4.0.)What if you need to create a whole new tag? The best solution is to
call the factory methodBeautifulSoup.new_tag():soup=BeautifulSoup("<b></b>",'html.parser')original_tag=soup.bnew_tag=soup.new_tag("a",href="http://www.example.com",string="Link text.")original_tag.append(new_tag)original_tag# <b><a href="http://www.example.com">Link text.</a></b>Only the first argument, the tag name, is required.(The ``string`` argument to ``new_tag`` was introduced in Beautiful Soup 4.13.0.)Because insertion methods return the newly inserted element, you
can create, insert, and obtain an element in one step:soup=BeautifulSoup("<html></html>",'html.parser')html=soup.htmltitle=html.append(soup.new_tag("title"))
NavigableString()and.new_tag()¶
NavigableString()
NavigableString()
.new_tag()
.new_tag()
¶
If you need to add a string to a document, no problem—you can pass a
Python string in toappend(), or you can call theNavigableStringconstructor:
append()
append()
NavigableString
NavigableString
NavigableString
frombs4importNavigableStringsoup=BeautifulSoup("<b></b>",'html.parser')tag=soup.btag.append("Hello")new_string=NavigableString(" there")tag.append(new_string)tag# <b>Hello there.</b>tag.contents# ['Hello', ' there']
frombs4importNavigableStringsoup=BeautifulSoup("<b></b>",'html.parser')tag=soup.btag.append("Hello")new_string=NavigableString(" there")tag.append(new_string)tag# <b>Hello there.</b>tag.contents# ['Hello', ' there']
frombs4importNavigableStringsoup=BeautifulSoup("<b></b>",'html.parser')tag=soup.btag.append("Hello")new_string=NavigableString(" there")tag.append(new_string)tag# <b>Hello there.</b>tag.contents# ['Hello', ' there']

from
bs4
import
NavigableString
soup
=
BeautifulSoup
(
"<b></b>"
,
'html.parser'
)
tag
=
soup
.
b
tag
.
append
(
"Hello"
)
new_string
=
NavigableString
(
" there"
)
tag
.
append
(
new_string
)
tag
# <b>Hello there.</b>
tag
.
contents
# ['Hello', ' there']
If you want to create a comment or some other subclass ofNavigableString, just call the constructor:
NavigableString
NavigableString
NavigableString
frombs4importCommentnew_comment=Comment("Nice to see you.")tag.append(new_comment)tag# <b>Hello there<!--Nice to see you.--></b>tag.contents# ['Hello', ' there', 'Nice to see you.']
frombs4importCommentnew_comment=Comment("Nice to see you.")tag.append(new_comment)tag# <b>Hello there<!--Nice to see you.--></b>tag.contents# ['Hello', ' there', 'Nice to see you.']
frombs4importCommentnew_comment=Comment("Nice to see you.")tag.append(new_comment)tag# <b>Hello there<!--Nice to see you.--></b>tag.contents# ['Hello', ' there', 'Nice to see you.']

from
bs4
import
Comment
new_comment
=
Comment
(
"Nice to see you."
)
tag
.
append
(
new_comment
)
tag
# <b>Hello there<!--Nice to see you.--></b>
tag
.
contents
# ['Hello', ' there', 'Nice to see you.']
(This is a new feature in Beautiful Soup 4.4.0.)
(This is a new feature in Beautiful Soup 4.4.0.)
What if you need to create a whole new tag? The best solution is to
call the factory methodBeautifulSoup.new_tag():
BeautifulSoup.new_tag()
BeautifulSoup.new_tag()
soup=BeautifulSoup("<b></b>",'html.parser')original_tag=soup.bnew_tag=soup.new_tag("a",href="http://www.example.com",string="Link text.")original_tag.append(new_tag)original_tag# <b><a href="http://www.example.com">Link text.</a></b>
soup=BeautifulSoup("<b></b>",'html.parser')original_tag=soup.bnew_tag=soup.new_tag("a",href="http://www.example.com",string="Link text.")original_tag.append(new_tag)original_tag# <b><a href="http://www.example.com">Link text.</a></b>
soup=BeautifulSoup("<b></b>",'html.parser')original_tag=soup.bnew_tag=soup.new_tag("a",href="http://www.example.com",string="Link text.")original_tag.append(new_tag)original_tag# <b><a href="http://www.example.com">Link text.</a></b>

soup
=
BeautifulSoup
(
"<b></b>"
,
'html.parser'
)
original_tag
=
soup
.
b
new_tag
=
soup
.
new_tag
(
"a"
,
href
=
"http://www.example.com"
,
string
=
"Link text."
)
original_tag
.
append
(
new_tag
)
original_tag
# <b><a href="http://www.example.com">Link text.</a></b>
Only the first argument, the tag name, is required.
(The ``string`` argument to ``new_tag`` was introduced in Beautiful Soup 4.13.0.)
(The ``string`` argument to ``new_tag`` was introduced in Beautiful Soup 4.13.0.)
Because insertion methods return the newly inserted element, you
can create, insert, and obtain an element in one step:
soup=BeautifulSoup("<html></html>",'html.parser')html=soup.htmltitle=html.append(soup.new_tag("title"))
soup=BeautifulSoup("<html></html>",'html.parser')html=soup.htmltitle=html.append(soup.new_tag("title"))
soup=BeautifulSoup("<html></html>",'html.parser')html=soup.htmltitle=html.append(soup.new_tag("title"))

soup
=
BeautifulSoup
(
"<html></html>"
,
'html.parser'
)
html
=
soup
.
html
title
=
html
.
append
(
soup
.
new_tag
(
"title"
))
insert()¶Tag.insert()is just likeTag.append(), except the new element
doesn't necessarily go at the end of its parent's.contents. It will be inserted at whatever numeric position you
say, similar to.insert()on a Python list:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.anew_string=tag.insert(1,"but did not endorse ")tag# <a href="http://example.com/">I linked to but did not endorse <i>example.com</i></a>tag.contents# ['I linked to ', 'but did not endorse ', <i>example.com</i>]new_string# 'but did not endorse 'You can pass more than one element intoTag.insert(). All the
elements will be inserted, starting at the numeric position you
provide.Tag.insert()returns the list of newly inserted elements.
insert()¶
insert()
insert()
¶
Tag.insert()is just likeTag.append(), except the new element
doesn't necessarily go at the end of its parent's.contents. It will be inserted at whatever numeric position you
say, similar to.insert()on a Python list:
Tag.insert()
Tag.insert()
Tag.append()
Tag.append()
.contents
.contents
.insert()
.insert()
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.anew_string=tag.insert(1,"but did not endorse ")tag# <a href="http://example.com/">I linked to but did not endorse <i>example.com</i></a>tag.contents# ['I linked to ', 'but did not endorse ', <i>example.com</i>]new_string# 'but did not endorse '
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.anew_string=tag.insert(1,"but did not endorse ")tag# <a href="http://example.com/">I linked to but did not endorse <i>example.com</i></a>tag.contents# ['I linked to ', 'but did not endorse ', <i>example.com</i>]new_string# 'but did not endorse '
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.anew_string=tag.insert(1,"but did not endorse ")tag# <a href="http://example.com/">I linked to but did not endorse <i>example.com</i></a>tag.contents# ['I linked to ', 'but did not endorse ', <i>example.com</i>]new_string# 'but did not endorse '

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
tag
=
soup
.
a
new_string
=
tag
.
insert
(
1
,
"but did not endorse "
)
tag
# <a href="http://example.com/">I linked to but did not endorse <i>example.com</i></a>
tag
.
contents
# ['I linked to ', 'but did not endorse ', <i>example.com</i>]
new_string
# 'but did not endorse '
You can pass more than one element intoTag.insert(). All the
elements will be inserted, starting at the numeric position you
provide.
Tag.insert()
Tag.insert()
Tag.insert()returns the list of newly inserted elements.
Tag.insert()
Tag.insert()
insert_before()andinsert_after()¶Theinsert_before()method inserts tags or strings immediately
before something else in the parse tree:soup=BeautifulSoup("<b>leave</b>",'html.parser')tag=soup.new_tag("i")tag.string="Don't"soup.b.string.insert_before(tag)soup.b# <b><i>Don't</i>leave</b>Theinsert_after()method inserts tags or strings immediately
after something else in the parse tree:div=soup.new_tag('div')div.string='ever'soup.b.i.insert_after(" you ",div)soup.b# <b><i>Don't</i> you <div>ever</div> leave</b>soup.b.contents# [<i>Don't</i>, ' you', <div>ever</div>, 'leave']Both methods return the list of newly inserted elements.
insert_before()andinsert_after()¶
insert_before()
insert_before()
insert_after()
insert_after()
¶
Theinsert_before()method inserts tags or strings immediately
before something else in the parse tree:
insert_before()
insert_before()
soup=BeautifulSoup("<b>leave</b>",'html.parser')tag=soup.new_tag("i")tag.string="Don't"soup.b.string.insert_before(tag)soup.b# <b><i>Don't</i>leave</b>
soup=BeautifulSoup("<b>leave</b>",'html.parser')tag=soup.new_tag("i")tag.string="Don't"soup.b.string.insert_before(tag)soup.b# <b><i>Don't</i>leave</b>
soup=BeautifulSoup("<b>leave</b>",'html.parser')tag=soup.new_tag("i")tag.string="Don't"soup.b.string.insert_before(tag)soup.b# <b><i>Don't</i>leave</b>

soup
=
BeautifulSoup
(
"<b>leave</b>"
,
'html.parser'
)
tag
=
soup
.
new_tag
(
"i"
)
tag
.
string
=
"Don't"
soup
.
b
.
string
.
insert_before
(
tag
)
soup
.
b
# <b><i>Don't</i>leave</b>
Theinsert_after()method inserts tags or strings immediately
after something else in the parse tree:
insert_after()
insert_after()
div=soup.new_tag('div')div.string='ever'soup.b.i.insert_after(" you ",div)soup.b# <b><i>Don't</i> you <div>ever</div> leave</b>soup.b.contents# [<i>Don't</i>, ' you', <div>ever</div>, 'leave']
div=soup.new_tag('div')div.string='ever'soup.b.i.insert_after(" you ",div)soup.b# <b><i>Don't</i> you <div>ever</div> leave</b>soup.b.contents# [<i>Don't</i>, ' you', <div>ever</div>, 'leave']
div=soup.new_tag('div')div.string='ever'soup.b.i.insert_after(" you ",div)soup.b# <b><i>Don't</i> you <div>ever</div> leave</b>soup.b.contents# [<i>Don't</i>, ' you', <div>ever</div>, 'leave']

div
=
soup
.
new_tag
(
'div'
)
div
.
string
=
'ever'
soup
.
b
.
i
.
insert_after
(
" you "
,
div
)
soup
.
b
# <b><i>Don't</i> you <div>ever</div> leave</b>
soup
.
b
.
contents
# [<i>Don't</i>, ' you', <div>ever</div>, 'leave']
Both methods return the list of newly inserted elements.
clear()¶Tag.clear()removes the contents of a tag:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.clear()tag# <a href="http://example.com/"></a>
clear()¶
clear()
clear()
¶
Tag.clear()removes the contents of a tag:
Tag.clear()
Tag.clear()
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.clear()tag# <a href="http://example.com/"></a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.clear()tag# <a href="http://example.com/"></a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.clear()tag# <a href="http://example.com/"></a>

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
tag
=
soup
.
a
tag
.
clear
()
tag
# <a href="http://example.com/"></a>
extract()¶PageElement.extract()removes a tag or string from the tree. It
returns the tag or string that was extracted:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.i.extract()a_tag# <a href="http://example.com/">I linked to</a>i_tag# <i>example.com</i>print(i_tag.parent)# NoneAt this point you effectively have two parse trees: one rooted at theBeautifulSoupobject you used to parse the document, and one rooted
at the tag that was extracted. You can go on to callextract()on
a child of the element you extracted:my_string=i_tag.string.extract()my_string# 'example.com'print(my_string.parent)# Nonei_tag# <i></i>
extract()¶
extract()
extract()
¶
PageElement.extract()removes a tag or string from the tree. It
returns the tag or string that was extracted:
PageElement.extract()
PageElement.extract()
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.i.extract()a_tag# <a href="http://example.com/">I linked to</a>i_tag# <i>example.com</i>print(i_tag.parent)# None
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.i.extract()a_tag# <a href="http://example.com/">I linked to</a>i_tag# <i>example.com</i>print(i_tag.parent)# None
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.i.extract()a_tag# <a href="http://example.com/">I linked to</a>i_tag# <i>example.com</i>print(i_tag.parent)# None

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
a_tag
=
soup
.
a
i_tag
=
soup
.
i
.
extract
()
a_tag
# <a href="http://example.com/">I linked to</a>
i_tag
# <i>example.com</i>
print
(
i_tag
.
parent
)
# None
At this point you effectively have two parse trees: one rooted at theBeautifulSoupobject you used to parse the document, and one rooted
at the tag that was extracted. You can go on to callextract()on
a child of the element you extracted:
BeautifulSoup
BeautifulSoup
extract()
extract()
my_string=i_tag.string.extract()my_string# 'example.com'print(my_string.parent)# Nonei_tag# <i></i>
my_string=i_tag.string.extract()my_string# 'example.com'print(my_string.parent)# Nonei_tag# <i></i>
my_string=i_tag.string.extract()my_string# 'example.com'print(my_string.parent)# Nonei_tag# <i></i>

my_string
=
i_tag
.
string
.
extract
()
my_string
# 'example.com'
print
(
my_string
.
parent
)
# None
i_tag
# <i></i>
decompose()¶Tag.decompose()removes a tag from the tree, thencompletely
destroys it and its contents:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.ii_tag.decompose()a_tag# <a href="http://example.com/">I linked to</a>The behavior of a decomposedTagorNavigableStringis not
defined and you should not use it for anything. If you're not sure
whether something has been decomposed, you can check its.decomposedproperty(new in Beautiful Soup 4.9.0):i_tag.decomposed# Truea_tag.decomposed# False
decompose()¶
decompose()
decompose()
¶
Tag.decompose()removes a tag from the tree, thencompletely
destroys it and its contents:
Tag.decompose()
Tag.decompose()
completely
destroys it and its contents
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.ii_tag.decompose()a_tag# <a href="http://example.com/">I linked to</a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.ii_tag.decompose()a_tag# <a href="http://example.com/">I linked to</a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.ii_tag.decompose()a_tag# <a href="http://example.com/">I linked to</a>

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
a_tag
=
soup
.
a
i_tag
=
soup
.
i
i_tag
.
decompose
()
a_tag
# <a href="http://example.com/">I linked to</a>
The behavior of a decomposedTagorNavigableStringis not
defined and you should not use it for anything. If you're not sure
whether something has been decomposed, you can check its.decomposedproperty(new in Beautiful Soup 4.9.0):
Tag
Tag
Tag
NavigableString
NavigableString
NavigableString
.decomposed
.decomposed
(new in Beautiful Soup 4.9.0)
i_tag.decomposed# Truea_tag.decomposed# False
i_tag.decomposed# Truea_tag.decomposed# False
i_tag.decomposed# Truea_tag.decomposed# False

i_tag
.
decomposed
# True
a_tag
.
decomposed
# False
replace_with()¶PageElement.replace_with()extracts a tag or string from the tree,
then replaces it with one or more tags or strings of your choice:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.anew_tag=soup.new_tag("b")new_tag.string="example.com"a_tag.i.replace_with(new_tag)a_tag# <a href="http://example.com/">I linked to <b>example.com</b></a>bold_tag=soup.new_tag("b")bold_tag.string="example"i_tag=soup.new_tag("i")i_tag.string="net"a_tag.b.replace_with(bold_tag,".",i_tag)a_tag# <a href="http://example.com/">I linked to <b>example</b>.<i>net</i></a>replace_with()returns the tag or string that got replaced, so
that you can examine it or add it back to another part of the tree.The ability to pass multiple arguments into replace_with() is new
in Beautiful Soup 4.10.0.

replace_with()¶
replace_with()
replace_with()
¶
PageElement.replace_with()extracts a tag or string from the tree,
then replaces it with one or more tags or strings of your choice:
PageElement.replace_with()
PageElement.replace_with()
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.anew_tag=soup.new_tag("b")new_tag.string="example.com"a_tag.i.replace_with(new_tag)a_tag# <a href="http://example.com/">I linked to <b>example.com</b></a>bold_tag=soup.new_tag("b")bold_tag.string="example"i_tag=soup.new_tag("i")i_tag.string="net"a_tag.b.replace_with(bold_tag,".",i_tag)a_tag# <a href="http://example.com/">I linked to <b>example</b>.<i>net</i></a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.anew_tag=soup.new_tag("b")new_tag.string="example.com"a_tag.i.replace_with(new_tag)a_tag# <a href="http://example.com/">I linked to <b>example.com</b></a>bold_tag=soup.new_tag("b")bold_tag.string="example"i_tag=soup.new_tag("i")i_tag.string="net"a_tag.b.replace_with(bold_tag,".",i_tag)a_tag# <a href="http://example.com/">I linked to <b>example</b>.<i>net</i></a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.anew_tag=soup.new_tag("b")new_tag.string="example.com"a_tag.i.replace_with(new_tag)a_tag# <a href="http://example.com/">I linked to <b>example.com</b></a>bold_tag=soup.new_tag("b")bold_tag.string="example"i_tag=soup.new_tag("i")i_tag.string="net"a_tag.b.replace_with(bold_tag,".",i_tag)a_tag# <a href="http://example.com/">I linked to <b>example</b>.<i>net</i></a>

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
a_tag
=
soup
.
a
new_tag
=
soup
.
new_tag
(
"b"
)
new_tag
.
string
=
"example.com"
a_tag
.
i
.
replace_with
(
new_tag
)
a_tag
# <a href="http://example.com/">I linked to <b>example.com</b></a>
bold_tag
=
soup
.
new_tag
(
"b"
)
bold_tag
.
string
=
"example"
i_tag
=
soup
.
new_tag
(
"i"
)
i_tag
.
string
=
"net"
a_tag
.
b
.
replace_with
(
bold_tag
,
"."
,
i_tag
)
a_tag
# <a href="http://example.com/">I linked to <b>example</b>.<i>net</i></a>
replace_with()returns the tag or string that got replaced, so
that you can examine it or add it back to another part of the tree.
replace_with()
replace_with()
The ability to pass multiple arguments into replace_with() is new
in Beautiful Soup 4.10.0.
The ability to pass multiple arguments into replace_with() is new
in Beautiful Soup 4.10.0.
wrap()¶PageElement.wrap()wraps an element in theTagobject you specify. It
returns the new wrapper:soup=BeautifulSoup("<p>I wish I was bold.</p>",'html.parser')soup.p.string.wrap(soup.new_tag("b"))# <b>I wish I was bold.</b>soup.p.wrap(soup.new_tag("div"))# <div><p><b>I wish I was bold.</b></p></div>This method is new in Beautiful Soup 4.0.5.
wrap()¶
wrap()
wrap()
¶
PageElement.wrap()wraps an element in theTagobject you specify. It
returns the new wrapper:
PageElement.wrap()
PageElement.wrap()
Tag
Tag
Tag
soup=BeautifulSoup("<p>I wish I was bold.</p>",'html.parser')soup.p.string.wrap(soup.new_tag("b"))# <b>I wish I was bold.</b>soup.p.wrap(soup.new_tag("div"))# <div><p><b>I wish I was bold.</b></p></div>
soup=BeautifulSoup("<p>I wish I was bold.</p>",'html.parser')soup.p.string.wrap(soup.new_tag("b"))# <b>I wish I was bold.</b>soup.p.wrap(soup.new_tag("div"))# <div><p><b>I wish I was bold.</b></p></div>
soup=BeautifulSoup("<p>I wish I was bold.</p>",'html.parser')soup.p.string.wrap(soup.new_tag("b"))# <b>I wish I was bold.</b>soup.p.wrap(soup.new_tag("div"))# <div><p><b>I wish I was bold.</b></p></div>

soup
=
BeautifulSoup
(
"<p>I wish I was bold.</p>"
,
'html.parser'
)
soup
.
p
.
string
.
wrap
(
soup
.
new_tag
(
"b"
))
# <b>I wish I was bold.</b>
soup
.
p
.
wrap
(
soup
.
new_tag
(
"div"
))
# <div><p><b>I wish I was bold.</b></p></div>
This method is new in Beautiful Soup 4.0.5.
This method is new in Beautiful Soup 4.0.5.
unwrap()¶Tag.unwrap()is the opposite ofwrap(). It replaces a tag with
whatever's inside that tag. It's good for stripping out markup:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.aa_tag.i.unwrap()a_tag# <a href="http://example.com/">I linked to example.com</a>Likereplace_with(),unwrap()returns the tag
that was replaced.
unwrap()¶
unwrap()
unwrap()
¶
Tag.unwrap()is the opposite ofwrap(). It replaces a tag with
whatever's inside that tag. It's good for stripping out markup:
Tag.unwrap()
Tag.unwrap()
wrap()
wrap()
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.aa_tag.i.unwrap()a_tag# <a href="http://example.com/">I linked to example.com</a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.aa_tag.i.unwrap()a_tag# <a href="http://example.com/">I linked to example.com</a>
markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.aa_tag.i.unwrap()a_tag# <a href="http://example.com/">I linked to example.com</a>

markup
=
'<a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
a_tag
=
soup
.
a
a_tag
.
i
.
unwrap
()
a_tag
# <a href="http://example.com/">I linked to example.com</a>
Likereplace_with(),unwrap()returns the tag
that was replaced.
replace_with()
replace_with()
unwrap()
unwrap()
smooth()¶After calling a bunch of methods that modify the parse tree, you may end up
with two or moreNavigableStringobjects next to each other.
Beautiful Soup doesn't have any problems with this, but since it can't happen
in a freshly parsed document, you might not expect behavior like the
following:soup=BeautifulSoup("<p>A one</p>",'html.parser')soup.p.append(", a two")soup.p.contents# ['A one', ', a two']print(soup.p.encode())# b'<p>A one, a two</p>'print(soup.p.prettify())# <p>#  A one#  , a two# </p>You can callTag.smooth()to clean up the parse tree by consolidating adjacent strings:soup.smooth()soup.p.contents# ['A one, a two']print(soup.p.prettify())# <p>#  A one, a two# </p>This method is new in Beautiful Soup 4.8.0.
smooth()¶
smooth()
smooth()
¶
After calling a bunch of methods that modify the parse tree, you may end up
with two or moreNavigableStringobjects next to each other.
Beautiful Soup doesn't have any problems with this, but since it can't happen
in a freshly parsed document, you might not expect behavior like the
following:
NavigableString
NavigableString
NavigableString
soup=BeautifulSoup("<p>A one</p>",'html.parser')soup.p.append(", a two")soup.p.contents# ['A one', ', a two']print(soup.p.encode())# b'<p>A one, a two</p>'print(soup.p.prettify())# <p>#  A one#  , a two# </p>
soup=BeautifulSoup("<p>A one</p>",'html.parser')soup.p.append(", a two")soup.p.contents# ['A one', ', a two']print(soup.p.encode())# b'<p>A one, a two</p>'print(soup.p.prettify())# <p>#  A one#  , a two# </p>
soup=BeautifulSoup("<p>A one</p>",'html.parser')soup.p.append(", a two")soup.p.contents# ['A one', ', a two']print(soup.p.encode())# b'<p>A one, a two</p>'print(soup.p.prettify())# <p>#  A one#  , a two# </p>

soup
=
BeautifulSoup
(
"<p>A one</p>"
,
'html.parser'
)
soup
.
p
.
append
(
", a two"
)
soup
.
p
.
contents
# ['A one', ', a two']
print
(
soup
.
p
.
encode
())
# b'<p>A one, a two</p>'
print
(
soup
.
p
.
prettify
())
# <p>
#  A one
#  , a two
# </p>
You can callTag.smooth()to clean up the parse tree by consolidating adjacent strings:
Tag.smooth()
Tag.smooth()
soup.smooth()soup.p.contents# ['A one, a two']print(soup.p.prettify())# <p>#  A one, a two# </p>
soup.smooth()soup.p.contents# ['A one, a two']print(soup.p.prettify())# <p>#  A one, a two# </p>
soup.smooth()soup.p.contents# ['A one, a two']print(soup.p.prettify())# <p>#  A one, a two# </p>

soup
.
smooth
()
soup
.
p
.
contents
# ['A one, a two']
print
(
soup
.
p
.
prettify
())
# <p>
#  A one, a two
# </p>
This method is new in Beautiful Soup 4.8.0.
This method is new in Beautiful Soup 4.8.0.
Output¶Pretty-printing¶Theprettify()method will turn a Beautiful Soup parse tree into a
nicely formatted Unicode string, with a separate line for each
tag and each string:markup='<html><head><body><a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')soup.prettify()# '<html>\n <head>\n </head>\n <body>\n  <a href="http://example.com/">\n...'print(soup.prettify())# <html>#  <head>#  </head>#  <body>#   <a href="http://example.com/">#    I linked to#    <i>#     example.com#    </i>#   </a>#  </body># </html>You can callprettify()on the top-levelBeautifulSoupobject,
or on any of itsTagobjects:print(soup.a.prettify())# <a href="http://example.com/">#  I linked to#  <i>#   example.com#  </i># </a>Since it adds whitespace (in the form of newlines),prettify()changes the meaning of an HTML document and should not be used to
reformat one. The goal ofprettify()is to help you visually
understand the structure of the documents you work with.Non-pretty printing¶If you just want a string, with no fancy formatting, you can callstr()on aBeautifulSoupobject, or on aTagwithin it:str(soup)# '<html><head></head><body><a href="http://example.com/">I linked to <i>example.com</i></a></body></html>'str(soup.a)# '<a href="http://example.com/">I linked to <i>example.com</i></a>'Thestr()function returns a string encoded in UTF-8. SeeEncodingsfor other options.You can also callencode()to get a bytestring, anddecode()to get Unicode.Output formatters¶If you give Beautiful Soup a document that contains HTML entities like
"&lquot;", they'll be converted to Unicode characters:soup=BeautifulSoup("&ldquo;Dammit!&rdquo; he said.",'html.parser')str(soup)# '“Dammit!” he said.'If you then convert the document to a bytestring, the Unicode characters
will be encoded as UTF-8. You won't get the HTML entities back:soup.encode("utf8")# b'\xe2\x80\x9cDammit!\xe2\x80\x9d he said.'By default, the only characters that are escaped upon output are bare
ampersands and angle brackets. These get turned into "&amp;", "&lt;",
and "&gt;", so that Beautiful Soup doesn't inadvertently generate
invalid HTML or XML:soup=BeautifulSoup("<p>The law firm of Dewey, Cheatem, & Howe</p>",'html.parser')soup.p# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')soup.a# <a href="http://example.com/?foo=val1&amp;bar=val2">A link</a>You can change this behavior by providing a value for theformatterargument toprettify(),encode(), ordecode(). Beautiful Soup recognizes five possible values forformatter.The default isformatter="minimal". Strings will only be processed
enough to ensure that Beautiful Soup generates valid HTML/XML:french="<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>"soup=BeautifulSoup(french,'html.parser')print(soup.prettify(formatter="minimal"))# <p>#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;# </p>If you pass informatter="html", Beautiful Soup will convert
Unicode characters to HTML entities whenever possible:print(soup.prettify(formatter="html"))# <p>#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;# </p>If you pass informatter="html5", it's similar toformatter="html", but Beautiful Soup will
omit the closing slash in HTML void tags like "br":br=BeautifulSoup("<br>",'html.parser').brprint(br.encode(formatter="html"))# b'<br/>'print(br.encode(formatter="html5"))# b'<br>'In addition, any attributes whose values are the empty string
will become HTML-style Boolean attributes:option=BeautifulSoup('<option selected=""></option>').optionprint(option.encode(formatter="html"))# b'<option selected=""></option>'print(option.encode(formatter="html5"))# b'<option selected></option>'(This behavior is new as of Beautiful Soup 4.10.0.)If you pass informatter=None, Beautiful Soup will not modify
strings at all on output. This is the fastest option, but it may lead
to Beautiful Soup generating invalid HTML/XML, as in these examples:print(soup.prettify(formatter=None))# <p>#  Il a dit <<Sacré bleu!>># </p>link_soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')print(link_soup.a.encode(formatter=None))# b'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'Formatter objects¶If you need more sophisticated control over your output, you can
instantiate one of Beautiful Soup's formatter classes and pass that
object in asformatter.classHTMLFormatter¶Used to customize the formatting rules for HTML documents.Here's a formatter that converts strings to uppercase, whether they
occur in a string object or an attribute value:frombs4.formatterimportHTMLFormatterdefuppercase(str):returnstr.upper()formatter=HTMLFormatter(uppercase)print(soup.prettify(formatter=formatter))# <p>#  IL A DIT <<SACRÉ BLEU!>># </p>print(link_soup.a.prettify(formatter=formatter))# <a href="HTTP://EXAMPLE.COM/?FOO=VAL1&BAR=VAL2">#  A LINK# </a>Here's a formatter that increases the indentation width when pretty-printing:formatter=HTMLFormatter(indent=8)print(link_soup.a.prettify(formatter=formatter))# <a href="http://example.com/?foo=val1&bar=val2">#         A link# </a>classXMLFormatter¶Used to customize the formatting rules for XML documents.Writing your own formatter¶SubclassingHTMLFormatterorXMLFormatterwill
give you even more control over the output. For example, Beautiful
Soup sorts the attributes in every tag by default:attr_soup=BeautifulSoup(b'<p z="1" m="2" a="3"></p>','html.parser')print(attr_soup.p.encode())# <p a="3" m="2" z="1"></p>To turn this off, you can subclass theFormatter.attributes()method, which controls which attributes are output and in what
order. This implementation also filters out the attribute called "m"
whenever it appears:classUnsortedAttributes(HTMLFormatter):defattributes(self,tag):fork,vintag.attrs.items():ifk=='m':continueyieldk,vprint(attr_soup.p.encode(formatter=UnsortedAttributes()))# <p z="1" a="3"></p>One last caveat: if you create aCDataobject, the text inside
that object is always presentedexactly as it appears, with no
formatting. Beautiful Soup will call your entity substitution
function, just in case you've written a custom function that counts
all the strings in the document or something, but it will ignore the
return value:frombs4.elementimportCDatasoup=BeautifulSoup("<a></a>",'html.parser')soup.a.string=CData("one < three")print(soup.a.prettify(formatter="html"))# <a>#  <![CDATA[one < three]]># </a>get_text()¶If you only want the human-readable text inside a document or tag, you can use theget_text()method. It returns all the text in a document or
beneath a tag, as a single Unicode string:markup='<a href="http://example.com/">\nI linked to <i>example.com</i>\n</a>'soup=BeautifulSoup(markup,'html.parser')soup.get_text()'\nI linked to example.com\n'soup.i.get_text()'example.com'You can specify a string to be used to join the bits of text
together:# soup.get_text("|")'\nI linked to |example.com|\n'You can tell Beautiful Soup to strip whitespace from the beginning and
end of each bit of text:# soup.get_text("|", strip=True)'I linked to|example.com'But at that point you might want to use the.stripped_stringsgenerator instead, and process the text yourself:[textfortextinsoup.stripped_strings]# ['I linked to', 'example.com']As of Beautiful Soup version 4.9.0, when lxml or html.parser are in
use, the contents of <script>, <style>, and <template>
tags are generally not considered to be 'text', since those tags are not part of
the human-visible content of the page.As of Beautiful Soup version 4.10.0, you can call get_text(),
.strings, or .stripped_strings on a NavigableString object. It will
either return the object itself, or nothing, so the only reason to do
this is when you're iterating over a mixed list.As of Beautiful Soup version 4.13.0, you can call .string on a
NavigableString object. It will return the object itself, so again,
the only reason to do this is when you're iterating over a mixed
list.