¶
ElementFilter.filter()¶
ElementFilter.filter()¶
ElementFilter.
ElementFilter.
filter
filter
(
)
¶

By passing anElementFilterinstance into Beautiful Soup's
tree-searching methods, you can completely customize what it means for
Beautiful Soup to match an element as it iterates over the parse
tree. By using theElementFilter.filter()method, you can
also completely customize what it means for Beautiful Soup to iterate
over the parse tree in the first place.
ElementFilter
ElementFilter
ElementFilter
ElementFilter.filter()
ElementFilter.filter()
ElementFilter.filter()
TheElementFilter.filter()method takes a generator that yields
a stream ofPageElementobjects. There is no restriction
on whichPageElementobjects show up, how many times they
show up, or in which order. Theoretically, they don't even need to be
from the sameBeautifulSoupdocument. You can do whatever
makes sense for you.
ElementFilter.filter()
ElementFilter.filter()
ElementFilter.filter()
PageElement
PageElement
PageElement
PageElement
BeautifulSoup
BeautifulSoup
Here's a silly example: a generator that walks randomly back and forth
through the parse tree:
importrandomdefrandom_walk(starting_location):location=starting_locationwhilelocationisnotNone:yieldlocationifrandom.random()<0.5:location=location.next_elementelse:location=location.previous_elementiflocationisNone:return
importrandomdefrandom_walk(starting_location):location=starting_locationwhilelocationisnotNone:yieldlocationifrandom.random()<0.5:location=location.next_elementelse:location=location.previous_elementiflocationisNone:return
importrandomdefrandom_walk(starting_location):location=starting_locationwhilelocationisnotNone:yieldlocationifrandom.random()<0.5:location=location.next_elementelse:location=location.previous_elementiflocationisNone:return

import
random
def
random_walk
(
starting_location
):
location
=
starting_location
while
location
is
not
None
:
yield
location
if
random
.
random
()
<
0.5
:
location
=
location
.
next_element
else
:
location
=
location
.
previous_element
if
location
is
None
:
return
Pass this generator into the exampleElementFilter.filter()and Beautiful Soup will wander randomly around the parse tree,
applying thenon_whitespace_filterfunction to every element it finds,
and yielding all of the matches—potentially yielding a given object
more than once:
ElementFilter.filter()
ElementFilter.filter()
ElementFilter.filter()
non_whitespace_filter
non_whitespace_filter
[xforxinnon_whitespace_filter.filter(random_walk(soup.b))]# [<b>bold</b>, 'bold', <b>bold</b>, <p><b>bold</b>...][xforxinnon_whitespace_filter.filter(random_walk(soup.b))]# [<b>bold</b>, <b>bold</b>, 'bold', <i>italic</i>, <i>italic</i>, ...]
[xforxinnon_whitespace_filter.filter(random_walk(soup.b))]# [<b>bold</b>, 'bold', <b>bold</b>, <p><b>bold</b>...][xforxinnon_whitespace_filter.filter(random_walk(soup.b))]# [<b>bold</b>, <b>bold</b>, 'bold', <i>italic</i>, <i>italic</i>, ...]
[xforxinnon_whitespace_filter.filter(random_walk(soup.b))]# [<b>bold</b>, 'bold', <b>bold</b>, <p><b>bold</b>...][xforxinnon_whitespace_filter.filter(random_walk(soup.b))]# [<b>bold</b>, <b>bold</b>, 'bold', <i>italic</i>, <i>italic</i>, ...]

[
x
for
x
in
non_whitespace_filter
.
filter
(
random_walk
(
soup
.
b
))]
# [<b>bold</b>, 'bold', <b>bold</b>, <p><b>bold</b>...]
[
x
for
x
in
non_whitespace_filter
.
filter
(
random_walk
(
soup
.
b
))]
# [<b>bold</b>, <b>bold</b>, 'bold', <i>italic</i>, <i>italic</i>, ...]
(Note that unlike the other code examples in this documentation, this
example can give different results every time you run it, thanks
to the random element. It's very unlikely, but this function could
wander around the parse tree forever andnevercomplete.)
never
Advanced parser customization¶Beautiful Soup offers a number of ways to customize how the parser
treats incoming HTML and XML. This section covers the most commonly
used customization techniques.Parsing only part of a document¶Let's say you want to use Beautiful Soup to look at a document's <a>
tags. It's a waste of time and memory to parse the entire document and
then go over it again looking for <a> tags. It would be much faster to
ignore everything that wasn't an <a> tag in the first place. TheSoupStrainerclass allows you to choose which parts of an incoming
document are parsed. You just create aSoupStrainerand pass it in
to theBeautifulSoupconstructor as theparse_onlyargument.(Note thatthis feature won't work if you're using the html5lib parser.
If you use html5lib, the whole document will be parsed, no
matter what. This is because html5lib constantly rearranges the parse
tree as it works, and if some part of the document didn't actually
make it into the parse tree, it'll crash. To avoid confusion, in the
examples below I'll be forcing Beautiful Soup to use Python's
built-in parser.)classSoupStrainer¶TheSoupStrainerclass takes the same arguments as a typical
method fromSearching the tree:name,attrs,string, and**kwargs. Here are
threeSoupStrainerobjects:frombs4importSoupStraineronly_a_tags=SoupStrainer("a")only_tags_with_id_link2=SoupStrainer(id="link2")defis_short_string(string):returnstringisnotNoneandlen(string)<10only_short_strings=SoupStrainer(string=is_short_string)I'm going to bring back the "three sisters" document one more time,
and we'll see what the document looks like when it's parsed with these
threeSoupStrainerobjects:html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""print(BeautifulSoup(html_doc,"html.parser",parse_only=only_a_tags).prettify())# <a class="sister" href="http://example.com/elsie" id="link1">#  Elsie# </a># <a class="sister" href="http://example.com/lacie" id="link2">#  Lacie# </a># <a class="sister" href="http://example.com/tillie" id="link3">#  Tillie# </a>print(BeautifulSoup(html_doc,"html.parser",parse_only=only_tags_with_id_link2).prettify())# <a class="sister" href="http://example.com/lacie" id="link2">#  Lacie# </a>print(BeautifulSoup(html_doc,"html.parser",parse_only=only_short_strings).prettify())# Elsie# ,# Lacie# and# Tillie# ...#TheSoupStrainerbehavior is as follows:When a tag matches, it is kept (including all its contents, whether they also
match or not).When a tag does not match, the tag itself is not kept, but parsing continues
into its contents to look for other tags that do match.Customizing multi-valued attributes¶In an HTML document, an attribute likeclassis given a list of
values, and an attribute likeidis given a single value, because
the HTML specification treats those attributes differently:markup='<a class="cls1 cls2" id="id1 id2">'soup=BeautifulSoup(markup,'html.parser')soup.a['class']# ['cls1', 'cls2']soup.a['id']# 'id1 id2'You can turn this off by passing inmulti_valued_attributes=None. Than all attributes will be given a
single value:soup=BeautifulSoup(markup,'html.parser',multi_valued_attributes=None)soup.a['class']# 'cls1 cls2'soup.a['id']# 'id1 id2'You can customize this behavior quite a bit by passing in a
dictionary formulti_valued_attributes. If you need this, look atHTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTESto see the
configuration Beautiful Soup uses by default, which is based on the
HTML specification.(This is a new feature in Beautiful Soup 4.8.0.)Handling duplicate attributes¶When using thehtml.parserparser, you can use theon_duplicate_attributeconstructor argument to customize what
Beautiful Soup does when it encounters a tag that defines the same
attribute more than once:markup='<a href="http://url1/" href="http://url2/">'The default behavior is to use the last value found for the tag:soup=BeautifulSoup(markup,'html.parser')soup.a['href']# http://url2/soup=BeautifulSoup(markup,'html.parser',on_duplicate_attribute='replace')soup.a['href']# http://url2/Withon_duplicate_attribute='ignore'you can tell Beautiful Soup
to use thefirstvalue found and ignore the rest:soup=BeautifulSoup(markup,'html.parser',on_duplicate_attribute='ignore')soup.a['href']# http://url1/(lxml and html5lib always do it this way; their behavior can't be
configured from within Beautiful Soup.)If you need more control, you can pass in a function that's called on each
duplicate value:defaccumulate(attributes_so_far,key,value):ifnotisinstance(attributes_so_far[key],list):attributes_so_far[key]=[attributes_so_far[key]]attributes_so_far[key].append(value)soup=BeautifulSoup(markup,'html.parser',on_duplicate_attribute=accumulate)soup.a['href']# ["http://url1/", "http://url2/"](This is a new feature in Beautiful Soup 4.9.1.)Instantiating custom subclasses¶When a parser tells Beautiful Soup about a tag or a string, Beautiful
Soup will instantiate aTagorNavigableStringobject to
contain that information. Instead of that default behavior, you can
tell Beautiful Soup to instantiatesubclassesofTagorNavigableString, subclasses you define with custom behavior:frombs4importTag,NavigableStringclassMyTag(Tag):passclassMyString(NavigableString):passmarkup="<div>some text</div>"soup=BeautifulSoup(markup,'html.parser')isinstance(soup.div,MyTag)# Falseisinstance(soup.div.string,MyString)# Falsemy_classes={Tag:MyTag,NavigableString:MyString}soup=BeautifulSoup(markup,'html.parser',element_classes=my_classes)isinstance(soup.div,MyTag)# Trueisinstance(soup.div.string,MyString)# TrueThis can be useful when incorporating Beautiful Soup into a test
framework.(This is a new feature in Beautiful Soup 4.8.1.)