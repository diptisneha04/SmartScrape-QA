¶
Here's the "Three sisters" HTML document again:
html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')
html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')
html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')

html_doc
=
"""
<html><head><title>The Dormouse's story</title></head>
<body>
<p class="title"><b>The Dormouse's story</b></p>
<p class="story">Once upon a time there were three little sisters; and their names were
<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,
<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
and they lived at the bottom of a well.</p>
<p class="story">...</p>
"""
from
bs4
import
BeautifulSoup
soup
=
BeautifulSoup
(
html_doc
,
'html.parser'
)
I'll use this as an example to show you how to move from one part of
a document to another.
Going down¶Tags may contain strings and more tags. These elements are the tag'schildren. Beautiful Soup provides a lot of different attributes for
navigating and iterating over a tag's children.Note that Beautiful Soup strings don't support any of these
attributes, because a string can't have children.Navigating using tag names¶The simplest way to navigate the parse tree is to find a tag by name. To
do this, you can use thefind()method:soup.find("head")# <head><title>The Dormouse's story</title></head>For convenience, just saying the name of the tag you want is equivalent
tofind()(if no built-in attribute has that name). If you want the
<head> tag, just saysoup.head:soup.head# <head><title>The Dormouse's story</title></head>soup.title# <title>The Dormouse's story</title>You can use this trick again and again to zoom in on a certain part
of the parse tree. This code gets the first <b> tag beneath the <body> tag:soup.body.b# <b>The Dormouse's story</b>find()(and its convenience equivalent) gives you only thefirsttag
by that name:soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>If you need to getallthe <a> tags, you can usefind_all():soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]For more complicated tasks, such as pattern-matching and filtering, you can
use the methods described inSearching the tree..contentsand.children¶A tag's children are available in a list called.contents:head_tag=soup.headhead_tag# <head><title>The Dormouse's story</title></head>head_tag.contents# [<title>The Dormouse's story</title>]title_tag=head_tag.contents[0]title_tag# <title>The Dormouse's story</title>title_tag.contents# ['The Dormouse's story']TheBeautifulSoupobject itself has children. In this case, the
<html> tag is the child of theBeautifulSoupobject.:len(soup.contents)# 1soup.contents[0].name# 'html'A string does not have.contents, because it can't contain
anything:text=title_tag.contents[0]text.contents# AttributeError: 'NavigableString' object has no attribute 'contents'Instead of getting them as a list, you can iterate over a tag's
children using the.childrengenerator:forchildintitle_tag.children:print(child)# The Dormouse's storyIf you want to modify a tag's children, use the methods described inModifying the tree. Don't modify the the.contentslist
directly: that can lead to problems that are subtle and difficult to
spot..descendants¶The.contentsand.childrenattributes consider only a tag'sdirectchildren. For instance, the <head> tag has a single direct
child—the <title> tag:head_tag.contents# [<title>The Dormouse's story</title>]But the <title> tag itself has a child: the string "The Dormouse's
story". There's a sense in which that string is also a child of the
<head> tag. The.descendantsattribute lets you iterate overallof a tag's children, recursively: its direct children, the children of
its direct children, and so on:forchildinhead_tag.descendants:print(child)# <title>The Dormouse's story</title># The Dormouse's storyThe <head> tag has only one child, but it has two descendants: the
<title> tag and the <title> tag's child. TheBeautifulSoupobject
only has one direct child (the <html> tag), but it has a whole lot of
descendants:len(list(soup.children))# 1len(list(soup.descendants))# 26.string¶If a tag has only one child, and that child is aNavigableString,
the child is made available as.string:title_tag.string# 'The Dormouse's story'If a tag's only child is another tag, andthattag has a.string, then the parent tag is considered to have the same.stringas its child:head_tag.contents# [<title>The Dormouse's story</title>]head_tag.string# 'The Dormouse's story'If a tag contains more than one thing, then it's not clear what.stringshould refer to, so.stringis defined to beNone:print(soup.html.string)# None.stringsandstripped_strings¶If there's more than one thing inside a tag, you can still look at
just the strings. Use the.stringsgenerator to see all descendant
strings:forstringinsoup.strings:print(repr(string))'\n'# "The Dormouse's story"# '\n'# '\n'# "The Dormouse's story"# '\n'# 'Once upon a time there were three little sisters; and their names were\n'# 'Elsie'# ',\n'# 'Lacie'# ' and\n'# 'Tillie'# ';\nand they lived at the bottom of a well.'# '\n'# '...'# '\n'Newlines and spaces that separate tags are also strings. You can remove extra
whitespace by using the.stripped_stringsgenerator instead:forstringinsoup.stripped_strings:print(repr(string))# "The Dormouse's story"# "The Dormouse's story"# 'Once upon a time there were three little sisters; and their names were'# 'Elsie'# ','# 'Lacie'# 'and'# 'Tillie'# ';\n and they lived at the bottom of a well.'# '...'Here, strings consisting entirely of whitespace are ignored, and
whitespace at the beginning and end of strings is removed.
Going down¶
¶
Tags may contain strings and more tags. These elements are the tag'schildren. Beautiful Soup provides a lot of different attributes for
navigating and iterating over a tag's children.
children
Note that Beautiful Soup strings don't support any of these
attributes, because a string can't have children.
Navigating using tag names¶The simplest way to navigate the parse tree is to find a tag by name. To
do this, you can use thefind()method:soup.find("head")# <head><title>The Dormouse's story</title></head>For convenience, just saying the name of the tag you want is equivalent
tofind()(if no built-in attribute has that name). If you want the
<head> tag, just saysoup.head:soup.head# <head><title>The Dormouse's story</title></head>soup.title# <title>The Dormouse's story</title>You can use this trick again and again to zoom in on a certain part
of the parse tree. This code gets the first <b> tag beneath the <body> tag:soup.body.b# <b>The Dormouse's story</b>find()(and its convenience equivalent) gives you only thefirsttag
by that name:soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>If you need to getallthe <a> tags, you can usefind_all():soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]For more complicated tasks, such as pattern-matching and filtering, you can
use the methods described inSearching the tree.