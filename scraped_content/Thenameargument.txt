name
name
¶
Pass in a value fornameand you'll tell Beautiful Soup to only
consider tags with certain names. Text strings will be ignored, as
will tags whose names that don't match.
name
name
This is the simplest usage:
soup.find_all("title")# [<title>The Dormouse's story</title>]
soup.find_all("title")# [<title>The Dormouse's story</title>]
soup.find_all("title")# [<title>The Dormouse's story</title>]

soup
.
find_all
(
"title"
)
# [<title>The Dormouse's story</title>]
Recall fromKinds of filtersthat the value tonamecan bea
string,a regular expression,a list,a function, orthe value
True.
Kinds of filters
name
name
a
string
a regular expression
a list
a function
the value
True
The keyword arguments¶Any keyword argument that's not recognized will be turned into a filter
that matches tags by their attributes.If you pass in a value for an argument calledid, Beautiful Soup will
filter against each tag's 'id' attribute value:soup.find_all(id='link2')# [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]Just as with tags, you can filter an attribute based ona string,a regular expression,a list,a function, orthe value True.If you pass in a regular expression object forhref, Beautiful Soup will
pattern-match against each tag's 'href' attribute value:soup.find_all(href=re.compile("elsie"))# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]The valueTruematches every tag that defines the attribute. This code
findsalltags with anidattribute:soup.find_all(id=True)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]For more complex matches, you can define a function that takes an attribute
value as its only argument. The function should returnTrueif the value
matches, andFalseotherwise.Here's a function that finds allatags whosehrefattributedoes notmatch a regular expression:importredefnot_lacie(href):returnhrefandnotre.compile("lacie").search(href)soup.find_all(href=not_lacie)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]If you pass in a list for an argument, Beautiful Soup will look for an
attribute-value match againstanystring, regular expression, or function in
that list. This code finds the first and last link:soup.find_all(id=["link1",re.compile("3$")])# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]You can filter against multiple attributes at once by passing multiple
keyword arguments:soup.find_all(href=re.compile("elsie"),id='link1')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>]Some attributes, like the data-* attributes in HTML 5, have names that
can't be used as the names of keyword arguments:data_soup=BeautifulSoup('<div data-foo="value">foo!</div>','html.parser')data_soup.find_all(data-foo="value")# SyntaxError: keyword can't be an expressionYou can use these attributes in searches by putting them into a
dictionary and passing the dictionary intofind_all()as theattrsargument:data_soup.find_all(attrs={"data-foo":"value"})# [<div data-foo="value">foo!</div>]Similarly, you can't use a keyword argument to search for HTML's 'name' attribute,
because Beautiful Soup uses thenameargument to contain the name
of the tag itself. Instead, you can give a value to 'name' in theattrsargument:name_soup=BeautifulSoup('<input name="email"/>','html.parser')name_soup.find_all(name="email")# []name_soup.find_all(attrs={"name":"email"})# [<input name="email"/>]
