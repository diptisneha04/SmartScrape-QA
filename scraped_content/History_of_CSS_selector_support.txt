¶
The.cssproperty was added in Beautiful Soup 4.12.0. Prior to this,
only the.select()and.select_one()convenience methods were
supported.
.css
.css
.select()
.select()
.select_one()
.select_one()
The Soup Sieve integration was added in Beautiful Soup 4.7.0. Earlier
versions had the.select()method, but only the most commonly-used
CSS selectors were supported.
.select()
.select()
Modifying the tree¶Beautiful Soup's main strength is in searching the parse tree, but you
can also modify the tree and write your changes as a new HTML or XML
document.Changing tag names and attributes¶I covered this earlier, inTag.attrs, but it bears repeating. You
can rename a tag, change the values of its attributes, add new
attributes, and delete attributes:soup=BeautifulSoup('<b class="boldest">Extremely bold</b>','html.parser')tag=soup.btag.name="blockquote"tag['class']='verybold'tag['id']=1tag# <blockquote class="verybold" id="1">Extremely bold</blockquote>deltag['class']deltag['id']tag# <blockquote>Extremely bold</blockquote>Modifying.string¶If you set a tag's.stringattribute to a new string, the tag's contents are
replaced with that string:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.string="New link text."tag# <a href="http://example.com/">New link text.</a>Be careful: if the tag contained other tags, they and all their
contents will be destroyed.append()¶You can add to a tag's contents withTag.append(). It works just
like calling.append()on a Python list:soup=BeautifulSoup("<a>Foo</a>",'html.parser')new_string=soup.a.append("Bar")soup# <a>FooBar</a>soup.a.contents# ['Foo', 'Bar']new_string# 'Bar'Tag.append()returns the newly appended element.extend()¶Starting in Beautiful Soup 4.7.0,Tagalso supports a method
called.extend(), which adds every element of a list to aTag,
in order:soup=BeautifulSoup("<a>Soup</a>",'html.parser')soup.a.extend(["'s"," ","on"])soup# <a>Soup's on</a>soup.a.contents# ['Soup', ''s', ' ', 'on']Tag.extend()returns the list of appended elements.NavigableString()and.new_tag()¶If you need to add a string to a document, no problem—you can pass a
Python string in toappend(), or you can call theNavigableStringconstructor:frombs4importNavigableStringsoup=BeautifulSoup("<b></b>",'html.parser')tag=soup.btag.append("Hello")new_string=NavigableString(" there")tag.append(new_string)tag# <b>Hello there.</b>tag.contents# ['Hello', ' there']If you want to create a comment or some other subclass ofNavigableString, just call the constructor:frombs4importCommentnew_comment=Comment("Nice to see you.")tag.append(new_comment)tag# <b>Hello there<!--Nice to see you.--></b>tag.contents# ['Hello', ' there', 'Nice to see you.'](This is a new feature in Beautiful Soup 4.4.0.)What if you need to create a whole new tag? The best solution is to
call the factory methodBeautifulSoup.new_tag():soup=BeautifulSoup("<b></b>",'html.parser')original_tag=soup.bnew_tag=soup.new_tag("a",href="http://www.example.com",string="Link text.")original_tag.append(new_tag)original_tag# <b><a href="http://www.example.com">Link text.</a></b>Only the first argument, the tag name, is required.(The ``string`` argument to ``new_tag`` was introduced in Beautiful Soup 4.13.0.)Because insertion methods return the newly inserted element, you
can create, insert, and obtain an element in one step:soup=BeautifulSoup("<html></html>",'html.parser')html=soup.htmltitle=html.append(soup.new_tag("title"))insert()¶Tag.insert()is just likeTag.append(), except the new element
doesn't necessarily go at the end of its parent's.contents. It will be inserted at whatever numeric position you
say, similar to.insert()on a Python list:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.anew_string=tag.insert(1,"but did not endorse ")tag# <a href="http://example.com/">I linked to but did not endorse <i>example.com</i></a>tag.contents# ['I linked to ', 'but did not endorse ', <i>example.com</i>]new_string# 'but did not endorse 'You can pass more than one element intoTag.insert(). All the
elements will be inserted, starting at the numeric position you
provide.Tag.insert()returns the list of newly inserted elements.insert_before()andinsert_after()¶Theinsert_before()method inserts tags or strings immediately
before something else in the parse tree:soup=BeautifulSoup("<b>leave</b>",'html.parser')tag=soup.new_tag("i")tag.string="Don't"soup.b.string.insert_before(tag)soup.b# <b><i>Don't</i>leave</b>Theinsert_after()method inserts tags or strings immediately
after something else in the parse tree:div=soup.new_tag('div')div.string='ever'soup.b.i.insert_after(" you ",div)soup.b# <b><i>Don't</i> you <div>ever</div> leave</b>soup.b.contents# [<i>Don't</i>, ' you', <div>ever</div>, 'leave']Both methods return the list of newly inserted elements.clear()¶Tag.clear()removes the contents of a tag:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')tag=soup.atag.clear()tag# <a href="http://example.com/"></a>extract()¶PageElement.extract()removes a tag or string from the tree. It
returns the tag or string that was extracted:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.i.extract()a_tag# <a href="http://example.com/">I linked to</a>i_tag# <i>example.com</i>print(i_tag.parent)# NoneAt this point you effectively have two parse trees: one rooted at theBeautifulSoupobject you used to parse the document, and one rooted
at the tag that was extracted. You can go on to callextract()on
a child of the element you extracted:my_string=i_tag.string.extract()my_string# 'example.com'print(my_string.parent)# Nonei_tag# <i></i>decompose()¶Tag.decompose()removes a tag from the tree, thencompletely
destroys it and its contents:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.ai_tag=soup.ii_tag.decompose()a_tag# <a href="http://example.com/">I linked to</a>The behavior of a decomposedTagorNavigableStringis not
defined and you should not use it for anything. If you're not sure
whether something has been decomposed, you can check its.decomposedproperty(new in Beautiful Soup 4.9.0):i_tag.decomposed# Truea_tag.decomposed# Falsereplace_with()¶PageElement.replace_with()extracts a tag or string from the tree,
then replaces it with one or more tags or strings of your choice:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.anew_tag=soup.new_tag("b")new_tag.string="example.com"a_tag.i.replace_with(new_tag)a_tag# <a href="http://example.com/">I linked to <b>example.com</b></a>bold_tag=soup.new_tag("b")bold_tag.string="example"i_tag=soup.new_tag("i")i_tag.string="net"a_tag.b.replace_with(bold_tag,".",i_tag)a_tag# <a href="http://example.com/">I linked to <b>example</b>.<i>net</i></a>replace_with()returns the tag or string that got replaced, so
that you can examine it or add it back to another part of the tree.The ability to pass multiple arguments into replace_with() is new
in Beautiful Soup 4.10.0.wrap()¶PageElement.wrap()wraps an element in theTagobject you specify. It
returns the new wrapper:soup=BeautifulSoup("<p>I wish I was bold.</p>",'html.parser')soup.p.string.wrap(soup.new_tag("b"))# <b>I wish I was bold.</b>soup.p.wrap(soup.new_tag("div"))# <div><p><b>I wish I was bold.</b></p></div>This method is new in Beautiful Soup 4.0.5.unwrap()¶Tag.unwrap()is the opposite ofwrap(). It replaces a tag with
whatever's inside that tag. It's good for stripping out markup:markup='<a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')a_tag=soup.aa_tag.i.unwrap()a_tag# <a href="http://example.com/">I linked to example.com</a>Likereplace_with(),unwrap()returns the tag
that was replaced.smooth()¶After calling a bunch of methods that modify the parse tree, you may end up
with two or moreNavigableStringobjects next to each other.
Beautiful Soup doesn't have any problems with this, but since it can't happen
in a freshly parsed document, you might not expect behavior like the
following:soup=BeautifulSoup("<p>A one</p>",'html.parser')soup.p.append(", a two")soup.p.contents# ['A one', ', a two']print(soup.p.encode())# b'<p>A one, a two</p>'print(soup.p.prettify())# <p>#  A one#  , a two# </p>You can callTag.smooth()to clean up the parse tree by consolidating adjacent strings:soup.smooth()soup.p.contents# ['A one, a two']print(soup.p.prettify())# <p>#  A one, a two# </p>This method is new in Beautiful Soup 4.8.0.