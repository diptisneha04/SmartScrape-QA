¶
If none of the other matches work for you, define a function that
takes an element as its only argument. The function should returnTrueif the argument matches, andFalseotherwise.
True
True
False
False
Here's a function that returnsTrueif a tag defines the "class"
attribute but doesn't define the "id" attribute:
True
True
defhas_class_but_no_id(tag):returntag.has_attr('class')andnottag.has_attr('id')
defhas_class_but_no_id(tag):returntag.has_attr('class')andnottag.has_attr('id')
defhas_class_but_no_id(tag):returntag.has_attr('class')andnottag.has_attr('id')

def
has_class_but_no_id
(
tag
):
return
tag
.
has_attr
(
'class'
)
and
not
tag
.
has_attr
(
'id'
)
Pass this function intofind_all()and you'll pick up all the <p>
tags:
find_all()
find_all()
soup.find_all(has_class_but_no_id)# [<p class="title"><b>The Dormouse's story</b></p>,#  <p class="story">Once upon a time there were…bottom of a well.</p>,#  <p class="story">...</p>]
soup.find_all(has_class_but_no_id)# [<p class="title"><b>The Dormouse's story</b></p>,#  <p class="story">Once upon a time there were…bottom of a well.</p>,#  <p class="story">...</p>]
soup.find_all(has_class_but_no_id)# [<p class="title"><b>The Dormouse's story</b></p>,#  <p class="story">Once upon a time there were…bottom of a well.</p>,#  <p class="story">...</p>]

soup
.
find_all
(
has_class_but_no_id
)
# [<p class="title"><b>The Dormouse's story</b></p>,
#  <p class="story">Once upon a time there were…bottom of a well.</p>,
#  <p class="story">...</p>]
This function picks up only the <p> tags. It doesn't pick up the <a>
tags, because those tags define both "class" and "id". It doesn't pick
up tags like <html> and <title>, because those tags don't define
"class".
The function can be as complicated as you need it to be. Here's a
function that returnsTrueif a tag is surrounded by string
objects:
True
True
frombs4importNavigableStringdefsurrounded_by_strings(tag):return(isinstance(tag.next_element,NavigableString)andisinstance(tag.previous_element,NavigableString))fortaginsoup.find_all(surrounded_by_strings):print(tag.name)# body# p# a# a# a# p
frombs4importNavigableStringdefsurrounded_by_strings(tag):return(isinstance(tag.next_element,NavigableString)andisinstance(tag.previous_element,NavigableString))fortaginsoup.find_all(surrounded_by_strings):print(tag.name)# body# p# a# a# a# p
frombs4importNavigableStringdefsurrounded_by_strings(tag):return(isinstance(tag.next_element,NavigableString)andisinstance(tag.previous_element,NavigableString))fortaginsoup.find_all(surrounded_by_strings):print(tag.name)# body# p# a# a# a# p

from
bs4
import
NavigableString
def
surrounded_by_strings
(
tag
):
return
(
isinstance
(
tag
.
next_element
,
NavigableString
)
and
isinstance
(
tag
.
previous_element
,
NavigableString
))
for
tag
in
soup
.
find_all
(
surrounded_by_strings
):
print
(
tag
.
name
)
# body
# p
# a
# a
# a
# p
A list¶If you pass in a list, Beautiful Soup will look for a match againstanystring, regular expression, or function in that list. This
code finds all the <a> tagsandall the <b> tags:soup.find_all(["a","b"])# [<b>The Dormouse's story</b>,#  <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]Now we're ready to look at the search methods in detail.
