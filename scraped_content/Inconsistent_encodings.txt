¶
Sometimes a document is mostly in UTF-8, but contains Windows-1252
characters such as (again) Microsoft smart quotes. This can happen
when a website includes data from multiple sources. You can useUnicodeDammit.detwingle()to turn such a document into pure
UTF-8. Here's a simple example:
UnicodeDammit.detwingle()
UnicodeDammit.detwingle()
snowmen=(u"\N{SNOWMAN}"*3)quote=(u"\N{LEFT DOUBLE QUOTATION MARK}I like snowmen!\N{RIGHT DOUBLE QUOTATION MARK}")doc=snowmen.encode("utf8")+quote.encode("windows_1252")
snowmen=(u"\N{SNOWMAN}"*3)quote=(u"\N{LEFT DOUBLE QUOTATION MARK}I like snowmen!\N{RIGHT DOUBLE QUOTATION MARK}")doc=snowmen.encode("utf8")+quote.encode("windows_1252")
snowmen=(u"\N{SNOWMAN}"*3)quote=(u"\N{LEFT DOUBLE QUOTATION MARK}I like snowmen!\N{RIGHT DOUBLE QUOTATION MARK}")doc=snowmen.encode("utf8")+quote.encode("windows_1252")

snowmen
=
(
u
"
\N{SNOWMAN}
"
*
3
)
quote
=
(
u
"
\N{LEFT DOUBLE QUOTATION MARK}
I like snowmen!
\N{RIGHT DOUBLE QUOTATION MARK}
"
)
doc
=
snowmen
.
encode
(
"utf8"
)
+
quote
.
encode
(
"windows_1252"
)
This document is a mess. The snowmen are in UTF-8 and the quotes are
in Windows-1252. You can display the snowmen or the quotes, but not
both:
print(doc)# ☃☃☃�I like snowmen!�print(doc.decode("windows-1252"))# â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”
print(doc)# ☃☃☃�I like snowmen!�print(doc.decode("windows-1252"))# â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”
print(doc)# ☃☃☃�I like snowmen!�print(doc.decode("windows-1252"))# â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”

print
(
doc
)
# ☃☃☃�I like snowmen!�
print
(
doc
.
decode
(
"windows-1252"
))
# â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”
Decoding the document as UTF-8 raises aUnicodeDecodeError, and
decoding it as Windows-1252 gives you gibberish. Fortunately,UnicodeDammit.detwingle()will convert the string to pure UTF-8,
allowing you to decode it to Unicode and display the snowmen and quote
marks simultaneously:
UnicodeDecodeError
UnicodeDecodeError
UnicodeDammit.detwingle()
UnicodeDammit.detwingle()
new_doc=UnicodeDammit.detwingle(doc)print(new_doc.decode("utf8"))# ☃☃☃“I like snowmen!”
new_doc=UnicodeDammit.detwingle(doc)print(new_doc.decode("utf8"))# ☃☃☃“I like snowmen!”
new_doc=UnicodeDammit.detwingle(doc)print(new_doc.decode("utf8"))# ☃☃☃“I like snowmen!”

new_doc
=
UnicodeDammit
.
detwingle
(
doc
)
print
(
new_doc
.
decode
(
"utf8"
))
# ☃☃☃“I like snowmen!”
UnicodeDammit.detwingle()only knows how to handle Windows-1252
embedded in UTF-8 (or vice versa, I suppose), but this is the most
common case.
UnicodeDammit.detwingle()
UnicodeDammit.detwingle()
Note that you must know to callUnicodeDammit.detwingle()on your
data before passing it intoBeautifulSoupor theUnicodeDammitconstructor. Beautiful Soup assumes that a document has a single
encoding, whatever it might be. If you pass it a document that
contains both UTF-8 and Windows-1252, it's likely to think the whole
document is Windows-1252, and the document will come out looking likeâ˜ƒâ˜ƒâ˜ƒ“Ilikesnowmen!”.
UnicodeDammit.detwingle()
UnicodeDammit.detwingle()
BeautifulSoup
BeautifulSoup
UnicodeDammit
UnicodeDammit
â˜ƒâ˜ƒâ˜ƒ“Ilikesnowmen!”
â˜ƒâ˜ƒâ˜ƒ“I
like
snowmen!”
UnicodeDammit.detwingle()is new in Beautiful Soup 4.1.0.
UnicodeDammit.detwingle()
UnicodeDammit.detwingle()
Line numbers¶Thehtml.parserandhtml5libparsers can keep track of where in
the original document eachTagwas found. You can access this
information asTag.sourceline(line number) andTag.sourcepos(position of the start tag within a line):markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (1, 0, 'Paragraph 1')# (3, 4, 'Paragraph 2')Note that the two parsers mean slightly different things bysourcelineandsourcepos. For html.parser, these numbers
represent the position of the initial less-than sign. For html5lib,
these numbers represent the position of the final greater-than sign:soup=BeautifulSoup(markup,'html5lib')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (2, 0, 'Paragraph 1')# (3, 6, 'Paragraph 2')You can shut off this feature by passingstore_line_numbers=Falseinto theBeautifulSoupconstructor:markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser',store_line_numbers=False)print(soup.p.sourceline)# NoneThis feature is new in 4.8.1, and the parsers based on lxml don't
support it.