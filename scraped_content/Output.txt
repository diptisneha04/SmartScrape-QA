¶
Pretty-printing¶Theprettify()method will turn a Beautiful Soup parse tree into a
nicely formatted Unicode string, with a separate line for each
tag and each string:markup='<html><head><body><a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')soup.prettify()# '<html>\n <head>\n </head>\n <body>\n  <a href="http://example.com/">\n...'print(soup.prettify())# <html>#  <head>#  </head>#  <body>#   <a href="http://example.com/">#    I linked to#    <i>#     example.com#    </i>#   </a>#  </body># </html>You can callprettify()on the top-levelBeautifulSoupobject,
or on any of itsTagobjects:print(soup.a.prettify())# <a href="http://example.com/">#  I linked to#  <i>#   example.com#  </i># </a>Since it adds whitespace (in the form of newlines),prettify()changes the meaning of an HTML document and should not be used to
reformat one. The goal ofprettify()is to help you visually
understand the structure of the documents you work with.

Pretty-printing¶
¶
Theprettify()method will turn a Beautiful Soup parse tree into a
nicely formatted Unicode string, with a separate line for each
tag and each string:
prettify()
prettify()
markup='<html><head><body><a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')soup.prettify()# '<html>\n <head>\n </head>\n <body>\n  <a href="http://example.com/">\n...'print(soup.prettify())# <html>#  <head>#  </head>#  <body>#   <a href="http://example.com/">#    I linked to#    <i>#     example.com#    </i>#   </a>#  </body># </html>
markup='<html><head><body><a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')soup.prettify()# '<html>\n <head>\n </head>\n <body>\n  <a href="http://example.com/">\n...'print(soup.prettify())# <html>#  <head>#  </head>#  <body>#   <a href="http://example.com/">#    I linked to#    <i>#     example.com#    </i>#   </a>#  </body># </html>
markup='<html><head><body><a href="http://example.com/">I linked to <i>example.com</i></a>'soup=BeautifulSoup(markup,'html.parser')soup.prettify()# '<html>\n <head>\n </head>\n <body>\n  <a href="http://example.com/">\n...'print(soup.prettify())# <html>#  <head>#  </head>#  <body>#   <a href="http://example.com/">#    I linked to#    <i>#     example.com#    </i>#   </a>#  </body># </html>

markup
=
'<html><head><body><a href="http://example.com/">I linked to <i>example.com</i></a>'
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
soup
.
prettify
()
# '<html>\n <head>\n </head>\n <body>\n  <a href="http://example.com/">\n...'
print
(
soup
.
prettify
())
# <html>
#  <head>
#  </head>
#  <body>
#   <a href="http://example.com/">
#    I linked to
#    <i>
#     example.com
#    </i>
#   </a>
#  </body>
# </html>
You can callprettify()on the top-levelBeautifulSoupobject,
or on any of itsTagobjects:
prettify()
prettify()
BeautifulSoup
BeautifulSoup
Tag
Tag
Tag
print(soup.a.prettify())# <a href="http://example.com/">#  I linked to#  <i>#   example.com#  </i># </a>
print(soup.a.prettify())# <a href="http://example.com/">#  I linked to#  <i>#   example.com#  </i># </a>
print(soup.a.prettify())# <a href="http://example.com/">#  I linked to#  <i>#   example.com#  </i># </a>

print
(
soup
.
a
.
prettify
())
# <a href="http://example.com/">
#  I linked to
#  <i>
#   example.com
#  </i>
# </a>
Since it adds whitespace (in the form of newlines),prettify()changes the meaning of an HTML document and should not be used to
reformat one. The goal ofprettify()is to help you visually
understand the structure of the documents you work with.
prettify()
prettify()
prettify()
prettify()
Non-pretty printing¶If you just want a string, with no fancy formatting, you can callstr()on aBeautifulSoupobject, or on aTagwithin it:str(soup)# '<html><head></head><body><a href="http://example.com/">I linked to <i>example.com</i></a></body></html>'str(soup.a)# '<a href="http://example.com/">I linked to <i>example.com</i></a>'Thestr()function returns a string encoded in UTF-8. SeeEncodingsfor other options.You can also callencode()to get a bytestring, anddecode()to get Unicode.
Non-pretty printing¶
¶
If you just want a string, with no fancy formatting, you can callstr()on aBeautifulSoupobject, or on aTagwithin it:
str()
str()
BeautifulSoup
BeautifulSoup
Tag
Tag
Tag
str(soup)# '<html><head></head><body><a href="http://example.com/">I linked to <i>example.com</i></a></body></html>'str(soup.a)# '<a href="http://example.com/">I linked to <i>example.com</i></a>'
str(soup)# '<html><head></head><body><a href="http://example.com/">I linked to <i>example.com</i></a></body></html>'str(soup.a)# '<a href="http://example.com/">I linked to <i>example.com</i></a>'
str(soup)# '<html><head></head><body><a href="http://example.com/">I linked to <i>example.com</i></a></body></html>'str(soup.a)# '<a href="http://example.com/">I linked to <i>example.com</i></a>'

str
(
soup
)
# '<html><head></head><body><a href="http://example.com/">I linked to <i>example.com</i></a></body></html>'
str
(
soup
.
a
)
# '<a href="http://example.com/">I linked to <i>example.com</i></a>'
Thestr()function returns a string encoded in UTF-8. SeeEncodingsfor other options.
str()
str()
Encodings
You can also callencode()to get a bytestring, anddecode()to get Unicode.
encode()
encode()
decode()
decode()
Output formatters¶If you give Beautiful Soup a document that contains HTML entities like
"&lquot;", they'll be converted to Unicode characters:soup=BeautifulSoup("&ldquo;Dammit!&rdquo; he said.",'html.parser')str(soup)# '“Dammit!” he said.'If you then convert the document to a bytestring, the Unicode characters
will be encoded as UTF-8. You won't get the HTML entities back:soup.encode("utf8")# b'\xe2\x80\x9cDammit!\xe2\x80\x9d he said.'By default, the only characters that are escaped upon output are bare
ampersands and angle brackets. These get turned into "&amp;", "&lt;",
and "&gt;", so that Beautiful Soup doesn't inadvertently generate
invalid HTML or XML:soup=BeautifulSoup("<p>The law firm of Dewey, Cheatem, & Howe</p>",'html.parser')soup.p# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')soup.a# <a href="http://example.com/?foo=val1&amp;bar=val2">A link</a>You can change this behavior by providing a value for theformatterargument toprettify(),encode(), ordecode(). Beautiful Soup recognizes five possible values forformatter.The default isformatter="minimal". Strings will only be processed
enough to ensure that Beautiful Soup generates valid HTML/XML:french="<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>"soup=BeautifulSoup(french,'html.parser')print(soup.prettify(formatter="minimal"))# <p>#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;# </p>If you pass informatter="html", Beautiful Soup will convert
Unicode characters to HTML entities whenever possible:print(soup.prettify(formatter="html"))# <p>#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;# </p>If you pass informatter="html5", it's similar toformatter="html", but Beautiful Soup will
omit the closing slash in HTML void tags like "br":br=BeautifulSoup("<br>",'html.parser').brprint(br.encode(formatter="html"))# b'<br/>'print(br.encode(formatter="html5"))# b'<br>'In addition, any attributes whose values are the empty string
will become HTML-style Boolean attributes:option=BeautifulSoup('<option selected=""></option>').optionprint(option.encode(formatter="html"))# b'<option selected=""></option>'print(option.encode(formatter="html5"))# b'<option selected></option>'(This behavior is new as of Beautiful Soup 4.10.0.)If you pass informatter=None, Beautiful Soup will not modify
strings at all on output. This is the fastest option, but it may lead
to Beautiful Soup generating invalid HTML/XML, as in these examples:print(soup.prettify(formatter=None))# <p>#  Il a dit <<Sacré bleu!>># </p>link_soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')print(link_soup.a.encode(formatter=None))# b'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'Formatter objects¶If you need more sophisticated control over your output, you can
instantiate one of Beautiful Soup's formatter classes and pass that
object in asformatter.classHTMLFormatter¶Used to customize the formatting rules for HTML documents.Here's a formatter that converts strings to uppercase, whether they
occur in a string object or an attribute value:frombs4.formatterimportHTMLFormatterdefuppercase(str):returnstr.upper()formatter=HTMLFormatter(uppercase)print(soup.prettify(formatter=formatter))# <p>#  IL A DIT <<SACRÉ BLEU!>># </p>print(link_soup.a.prettify(formatter=formatter))# <a href="HTTP://EXAMPLE.COM/?FOO=VAL1&BAR=VAL2">#  A LINK# </a>Here's a formatter that increases the indentation width when pretty-printing:formatter=HTMLFormatter(indent=8)print(link_soup.a.prettify(formatter=formatter))# <a href="http://example.com/?foo=val1&bar=val2">#         A link# </a>classXMLFormatter¶Used to customize the formatting rules for XML documents.Writing your own formatter¶SubclassingHTMLFormatterorXMLFormatterwill
give you even more control over the output. For example, Beautiful
Soup sorts the attributes in every tag by default:attr_soup=BeautifulSoup(b'<p z="1" m="2" a="3"></p>','html.parser')print(attr_soup.p.encode())# <p a="3" m="2" z="1"></p>To turn this off, you can subclass theFormatter.attributes()method, which controls which attributes are output and in what
order. This implementation also filters out the attribute called "m"
whenever it appears:classUnsortedAttributes(HTMLFormatter):defattributes(self,tag):fork,vintag.attrs.items():ifk=='m':continueyieldk,vprint(attr_soup.p.encode(formatter=UnsortedAttributes()))# <p z="1" a="3"></p>One last caveat: if you create aCDataobject, the text inside
that object is always presentedexactly as it appears, with no
formatting. Beautiful Soup will call your entity substitution
function, just in case you've written a custom function that counts
all the strings in the document or something, but it will ignore the
return value:frombs4.elementimportCDatasoup=BeautifulSoup("<a></a>",'html.parser')soup.a.string=CData("one < three")print(soup.a.prettify(formatter="html"))# <a>#  <![CDATA[one < three]]># </a>

Output formatters¶
¶
If you give Beautiful Soup a document that contains HTML entities like
"&lquot;", they'll be converted to Unicode characters:
soup=BeautifulSoup("&ldquo;Dammit!&rdquo; he said.",'html.parser')str(soup)# '“Dammit!” he said.'
soup=BeautifulSoup("&ldquo;Dammit!&rdquo; he said.",'html.parser')str(soup)# '“Dammit!” he said.'
soup=BeautifulSoup("&ldquo;Dammit!&rdquo; he said.",'html.parser')str(soup)# '“Dammit!” he said.'

soup
=
BeautifulSoup
(
"&ldquo;Dammit!&rdquo; he said."
,
'html.parser'
)
str
(
soup
)
# '“Dammit!” he said.'
If you then convert the document to a bytestring, the Unicode characters
will be encoded as UTF-8. You won't get the HTML entities back:
soup.encode("utf8")# b'\xe2\x80\x9cDammit!\xe2\x80\x9d he said.'
soup.encode("utf8")# b'\xe2\x80\x9cDammit!\xe2\x80\x9d he said.'
soup.encode("utf8")# b'\xe2\x80\x9cDammit!\xe2\x80\x9d he said.'

soup
.
encode
(
"utf8"
)
# b'\xe2\x80\x9cDammit!\xe2\x80\x9d he said.'
By default, the only characters that are escaped upon output are bare
ampersands and angle brackets. These get turned into "&amp;", "&lt;",
and "&gt;", so that Beautiful Soup doesn't inadvertently generate
invalid HTML or XML:
soup=BeautifulSoup("<p>The law firm of Dewey, Cheatem, & Howe</p>",'html.parser')soup.p# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')soup.a# <a href="http://example.com/?foo=val1&amp;bar=val2">A link</a>
soup=BeautifulSoup("<p>The law firm of Dewey, Cheatem, & Howe</p>",'html.parser')soup.p# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')soup.a# <a href="http://example.com/?foo=val1&amp;bar=val2">A link</a>
soup=BeautifulSoup("<p>The law firm of Dewey, Cheatem, & Howe</p>",'html.parser')soup.p# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')soup.a# <a href="http://example.com/?foo=val1&amp;bar=val2">A link</a>

soup
=
BeautifulSoup
(
"<p>The law firm of Dewey, Cheatem, & Howe</p>"
,
'html.parser'
)
soup
.
p
# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>
soup
=
BeautifulSoup
(
'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'
,
'html.parser'
)
soup
.
a
# <a href="http://example.com/?foo=val1&amp;bar=val2">A link</a>
You can change this behavior by providing a value for theformatterargument toprettify(),encode(), ordecode(). Beautiful Soup recognizes five possible values forformatter.
formatter
formatter
prettify()
prettify()
encode()
encode()
decode()
decode()
formatter
formatter
The default isformatter="minimal". Strings will only be processed
enough to ensure that Beautiful Soup generates valid HTML/XML:
formatter="minimal"
formatter="minimal"
french="<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>"soup=BeautifulSoup(french,'html.parser')print(soup.prettify(formatter="minimal"))# <p>#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;# </p>
french="<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>"soup=BeautifulSoup(french,'html.parser')print(soup.prettify(formatter="minimal"))# <p>#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;# </p>
french="<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>"soup=BeautifulSoup(french,'html.parser')print(soup.prettify(formatter="minimal"))# <p>#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;# </p>

french
=
"<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>"
soup
=
BeautifulSoup
(
french
,
'html.parser'
)
print
(
soup
.
prettify
(
formatter
=
"minimal"
))
# <p>
#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;
# </p>
If you pass informatter="html", Beautiful Soup will convert
Unicode characters to HTML entities whenever possible:
formatter="html"
formatter="html"
print(soup.prettify(formatter="html"))# <p>#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;# </p>
print(soup.prettify(formatter="html"))# <p>#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;# </p>
print(soup.prettify(formatter="html"))# <p>#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;# </p>

print
(
soup
.
prettify
(
formatter
=
"html"
))
# <p>
#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;
# </p>
If you pass informatter="html5", it's similar toformatter="html", but Beautiful Soup will
omit the closing slash in HTML void tags like "br":
formatter="html5"
formatter="html5"
formatter="html"
formatter="html"
br=BeautifulSoup("<br>",'html.parser').brprint(br.encode(formatter="html"))# b'<br/>'print(br.encode(formatter="html5"))# b'<br>'
br=BeautifulSoup("<br>",'html.parser').brprint(br.encode(formatter="html"))# b'<br/>'print(br.encode(formatter="html5"))# b'<br>'
br=BeautifulSoup("<br>",'html.parser').brprint(br.encode(formatter="html"))# b'<br/>'print(br.encode(formatter="html5"))# b'<br>'

br
=
BeautifulSoup
(
"<br>"
,
'html.parser'
)
.
br
print
(
br
.
encode
(
formatter
=
"html"
))
# b'<br/>'
print
(
br
.
encode
(
formatter
=
"html5"
))
# b'<br>'
In addition, any attributes whose values are the empty string
will become HTML-style Boolean attributes:
option=BeautifulSoup('<option selected=""></option>').optionprint(option.encode(formatter="html"))# b'<option selected=""></option>'print(option.encode(formatter="html5"))# b'<option selected></option>'
option=BeautifulSoup('<option selected=""></option>').optionprint(option.encode(formatter="html"))# b'<option selected=""></option>'print(option.encode(formatter="html5"))# b'<option selected></option>'
option=BeautifulSoup('<option selected=""></option>').optionprint(option.encode(formatter="html"))# b'<option selected=""></option>'print(option.encode(formatter="html5"))# b'<option selected></option>'

option
=
BeautifulSoup
(
'<option selected=""></option>'
)
.
option
print
(
option
.
encode
(
formatter
=
"html"
))
# b'<option selected=""></option>'
print
(
option
.
encode
(
formatter
=
"html5"
))
# b'<option selected></option>'
(This behavior is new as of Beautiful Soup 4.10.0.)
(This behavior is new as of Beautiful Soup 4.10.0.)
If you pass informatter=None, Beautiful Soup will not modify
strings at all on output. This is the fastest option, but it may lead
to Beautiful Soup generating invalid HTML/XML, as in these examples:
formatter=None
formatter=None
print(soup.prettify(formatter=None))# <p>#  Il a dit <<Sacré bleu!>># </p>link_soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')print(link_soup.a.encode(formatter=None))# b'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'
print(soup.prettify(formatter=None))# <p>#  Il a dit <<Sacré bleu!>># </p>link_soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')print(link_soup.a.encode(formatter=None))# b'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'
print(soup.prettify(formatter=None))# <p>#  Il a dit <<Sacré bleu!>># </p>link_soup=BeautifulSoup('<a href="http://example.com/?foo=val1&bar=val2">A link</a>','html.parser')print(link_soup.a.encode(formatter=None))# b'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'

print
(
soup
.
prettify
(
formatter
=
None
))
# <p>
#  Il a dit <<Sacré bleu!>>
# </p>
link_soup
=
BeautifulSoup
(
'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'
,
'html.parser'
)
print
(
link_soup
.
a
.
encode
(
formatter
=
None
))
# b'<a href="http://example.com/?foo=val1&bar=val2">A link</a>'
Formatter objects¶If you need more sophisticated control over your output, you can
instantiate one of Beautiful Soup's formatter classes and pass that
object in asformatter.classHTMLFormatter¶Used to customize the formatting rules for HTML documents.Here's a formatter that converts strings to uppercase, whether they
occur in a string object or an attribute value:frombs4.formatterimportHTMLFormatterdefuppercase(str):returnstr.upper()formatter=HTMLFormatter(uppercase)print(soup.prettify(formatter=formatter))# <p>#  IL A DIT <<SACRÉ BLEU!>># </p>print(link_soup.a.prettify(formatter=formatter))# <a href="HTTP://EXAMPLE.COM/?FOO=VAL1&BAR=VAL2">#  A LINK# </a>Here's a formatter that increases the indentation width when pretty-printing:formatter=HTMLFormatter(indent=8)print(link_soup.a.prettify(formatter=formatter))# <a href="http://example.com/?foo=val1&bar=val2">#         A link# </a>classXMLFormatter¶Used to customize the formatting rules for XML documents.