¶
Here's an HTML document I'll be using as an example throughout this
document. It's part of a story fromAlice in Wonderland:
Alice in Wonderland
html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""
html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""
html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""

html_doc
=
"""<html><head><title>The Dormouse's story</title></head>
<body>
<p class="title"><b>The Dormouse's story</b></p>
<p class="story">Once upon a time there were three little sisters; and their names were
<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,
<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
and they lived at the bottom of a well.</p>
<p class="story">...</p>
"""
Running the "three sisters" document through Beautiful Soup gives us aBeautifulSoupobject, which represents the document as a nested
data structure:
BeautifulSoup
BeautifulSoup
frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')print(soup.prettify())# <html>#  <head>#   <title>#    The Dormouse's story#   </title>#  </head>#  <body>#   <p class="title">#    <b>#     The Dormouse's story#    </b>#   </p>#   <p class="story">#    Once upon a time there were three little sisters; and their names were#    <a class="sister" href="http://example.com/elsie" id="link1">#     Elsie#    </a>#    ,#    <a class="sister" href="http://example.com/lacie" id="link2">#     Lacie#    </a>#    and#    <a class="sister" href="http://example.com/tillie" id="link3">#     Tillie#    </a>#    ; and they lived at the bottom of a well.#   </p>#   <p class="story">#    ...#   </p>#  </body># </html>
frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')print(soup.prettify())# <html>#  <head>#   <title>#    The Dormouse's story#   </title>#  </head>#  <body>#   <p class="title">#    <b>#     The Dormouse's story#    </b>#   </p>#   <p class="story">#    Once upon a time there were three little sisters; and their names were#    <a class="sister" href="http://example.com/elsie" id="link1">#     Elsie#    </a>#    ,#    <a class="sister" href="http://example.com/lacie" id="link2">#     Lacie#    </a>#    and#    <a class="sister" href="http://example.com/tillie" id="link3">#     Tillie#    </a>#    ; and they lived at the bottom of a well.#   </p>#   <p class="story">#    ...#   </p>#  </body># </html>
frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')print(soup.prettify())# <html>#  <head>#   <title>#    The Dormouse's story#   </title>#  </head>#  <body>#   <p class="title">#    <b>#     The Dormouse's story#    </b>#   </p>#   <p class="story">#    Once upon a time there were three little sisters; and their names were#    <a class="sister" href="http://example.com/elsie" id="link1">#     Elsie#    </a>#    ,#    <a class="sister" href="http://example.com/lacie" id="link2">#     Lacie#    </a>#    and#    <a class="sister" href="http://example.com/tillie" id="link3">#     Tillie#    </a>#    ; and they lived at the bottom of a well.#   </p>#   <p class="story">#    ...#   </p>#  </body># </html>

from
bs4
import
BeautifulSoup
soup
=
BeautifulSoup
(
html_doc
,
'html.parser'
)
print
(
soup
.
prettify
())
# <html>
#  <head>
#   <title>
#    The Dormouse's story
#   </title>
#  </head>
#  <body>
#   <p class="title">
#    <b>
#     The Dormouse's story
#    </b>
#   </p>
#   <p class="story">
#    Once upon a time there were three little sisters; and their names were
#    <a class="sister" href="http://example.com/elsie" id="link1">
#     Elsie
#    </a>
#    ,
#    <a class="sister" href="http://example.com/lacie" id="link2">
#     Lacie
#    </a>
#    and
#    <a class="sister" href="http://example.com/tillie" id="link3">
#     Tillie
#    </a>
#    ; and they lived at the bottom of a well.
#   </p>
#   <p class="story">
#    ...
#   </p>
#  </body>
# </html>
Here are some simple ways to navigate that data structure:
soup.title# <title>The Dormouse's story</title>soup.title.name# u'title'soup.title.string# u'The Dormouse's story'soup.title.parent.name# u'head'soup.p# <p class="title"><b>The Dormouse's story</b></p>soup.p['class']# u'title'soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]soup.find(id="link3")# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>
soup.title# <title>The Dormouse's story</title>soup.title.name# u'title'soup.title.string# u'The Dormouse's story'soup.title.parent.name# u'head'soup.p# <p class="title"><b>The Dormouse's story</b></p>soup.p['class']# u'title'soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]soup.find(id="link3")# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>
soup.title# <title>The Dormouse's story</title>soup.title.name# u'title'soup.title.string# u'The Dormouse's story'soup.title.parent.name# u'head'soup.p# <p class="title"><b>The Dormouse's story</b></p>soup.p['class']# u'title'soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]soup.find(id="link3")# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>

soup
.
title
# <title>The Dormouse's story</title>
soup
.
title
.
name
# u'title'
soup
.
title
.
string
# u'The Dormouse's story'
soup
.
title
.
parent
.
name
# u'head'
soup
.
p
# <p class="title"><b>The Dormouse's story</b></p>
soup
.
p
[
'class'
]
# u'title'
soup
.
a
# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>
soup
.
find_all
(
'a'
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup
.
find
(
id
=
"link3"
)
# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>
One common task is extracting all the URLs found within a page's <a> tags:
forlinkinsoup.find_all('a'):print(link.get('href'))# http://example.com/elsie# http://example.com/lacie# http://example.com/tillie
forlinkinsoup.find_all('a'):print(link.get('href'))# http://example.com/elsie# http://example.com/lacie# http://example.com/tillie
forlinkinsoup.find_all('a'):print(link.get('href'))# http://example.com/elsie# http://example.com/lacie# http://example.com/tillie

for
link
in
soup
.
find_all
(
'a'
):
print
(
link
.
get
(
'href'
))
# http://example.com/elsie
# http://example.com/lacie
# http://example.com/tillie
Another common task is extracting all the text from a page:
print(soup.get_text())# The Dormouse's story## The Dormouse's story## Once upon a time there were three little sisters; and their names were# Elsie,# Lacie and# Tillie;# and they lived at the bottom of a well.## ...
print(soup.get_text())# The Dormouse's story## The Dormouse's story## Once upon a time there were three little sisters; and their names were# Elsie,# Lacie and# Tillie;# and they lived at the bottom of a well.## ...
print(soup.get_text())# The Dormouse's story## The Dormouse's story## Once upon a time there were three little sisters; and their names were# Elsie,# Lacie and# Tillie;# and they lived at the bottom of a well.## ...

print
(
soup
.
get_text
())
# The Dormouse's story
#
# The Dormouse's story
#
# Once upon a time there were three little sisters; and their names were
# Elsie,
# Lacie and
# Tillie;
# and they lived at the bottom of a well.
#
# ...
Does this look like what you need? If so, read on.
Installing Beautiful Soup¶If you're using a recent version of Debian or Ubuntu Linux, you can
install Beautiful Soup with the system package manager:$apt-getinstallpython3-bs4Beautiful Soup 4 is published through PyPi, so if you can't install it
with the system packager, you can install it witheasy_installorpip. The package name isbeautifulsoup4. Make sure you use the
right version ofpiporeasy_installfor your Python version
(these may be namedpip3andeasy_install3respectively).$easy_installbeautifulsoup4$pipinstallbeautifulsoup4(TheBeautifulSouppackage isnotwhat you want. That's
the previous major release,Beautiful Soup 3. Lots of software uses
BS3, so it's still available, but if you're writing new code you
should installbeautifulsoup4.)If you don't haveeasy_installorpipinstalled, you candownload the Beautiful Soup 4 source tarballand
install it withsetup.py.$pythonsetup.pyinstallIf all else fails, the license for Beautiful Soup allows you to
package the entire library with your application. You can download the
tarball, copy itsbs4directory into your application's codebase,
and use Beautiful Soup without installing it at all.I use Python 3.10 to develop Beautiful Soup, but it should work with
other recent versions.Installing a parser¶Beautiful Soup supports the HTML parser included in Python's standard
library, but it also supports a number of third-party Python parsers.
One is thelxml parser. Depending on your setup,
you might install lxml with one of these commands:$apt-getinstallpython-lxml$easy_installlxml$pipinstalllxmlAnother alternative is the pure-Pythonhtml5lib parser, which parses HTML the way a
web browser does. Depending on your setup, you might install html5lib
with one of these commands:$apt-getinstallpython3-html5lib$pipinstallhtml5libThis table summarizes the advantages and disadvantages of each parser library:ParserTypical usageAdvantagesDisadvantagesPython's html.parserBeautifulSoup(markup,"html.parser")Batteries includedDecent speedNot as fast as lxml,
less lenient than
html5lib.lxml's HTML parserBeautifulSoup(markup,"lxml")Very fastExternal C dependencylxml's XML parserBeautifulSoup(markup,"lxml-xml")BeautifulSoup(markup,"xml")Very fastThe only currently supported
XML parserExternal C dependencyhtml5libBeautifulSoup(markup,"html5lib")Extremely lenientParses pages the same way a
web browser doesCreates valid HTML5Very slowExternal Python
dependencyIf you can, I recommend you install and use lxml for speed.Note that if a document is invalid, different parsers will generate
different Beautiful Soup trees for it. SeeDifferences
between parsersfor details.