¶
Beautiful Soup defines someNavigableStringclasses for
holding special types of strings that can be found in XML
documents. LikeComment, these classes are subclasses ofNavigableStringthat add something extra to the string on
output.
NavigableString
NavigableString
NavigableString
Comment
Comment
Comment
NavigableString
NavigableString
NavigableString
classDeclaration¶
classDeclaration¶
class
class

Declaration
Declaration
¶

ANavigableStringsubclass representing thedeclarationat the beginning of
an XML document.
NavigableString
NavigableString
NavigableString
declaration
classDoctype¶
classDoctype¶
class
class

Doctype
Doctype
¶

ANavigableStringsubclass representing thedocument type
declarationwhich may
be found near the beginning of an XML document.
NavigableString
NavigableString
NavigableString
document type
declaration
classCData¶
classCData¶
class
class

CData
CData
¶

ANavigableStringsubclass that represents aCData section.
NavigableString
NavigableString
NavigableString
CData section
classProcessingInstruction¶
classProcessingInstruction¶
class
class

ProcessingInstruction
ProcessingInstruction
¶

ANavigableStringsubclass that represents the contents
of anXML processing instruction.
NavigableString
NavigableString
NavigableString
XML processing instruction
Navigating the tree¶Here's the "Three sisters" HTML document again:html_doc="""<html><head><title>The Dormouse's story</title></head><body><p class="title"><b>The Dormouse's story</b></p><p class="story">Once upon a time there were three little sisters; and their names were<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;and they lived at the bottom of a well.</p><p class="story">...</p>"""frombs4importBeautifulSoupsoup=BeautifulSoup(html_doc,'html.parser')I'll use this as an example to show you how to move from one part of
a document to another.Going down¶Tags may contain strings and more tags. These elements are the tag'schildren. Beautiful Soup provides a lot of different attributes for
navigating and iterating over a tag's children.Note that Beautiful Soup strings don't support any of these
attributes, because a string can't have children.Navigating using tag names¶The simplest way to navigate the parse tree is to find a tag by name. To
do this, you can use thefind()method:soup.find("head")# <head><title>The Dormouse's story</title></head>For convenience, just saying the name of the tag you want is equivalent
tofind()(if no built-in attribute has that name). If you want the
<head> tag, just saysoup.head:soup.head# <head><title>The Dormouse's story</title></head>soup.title# <title>The Dormouse's story</title>You can use this trick again and again to zoom in on a certain part
of the parse tree. This code gets the first <b> tag beneath the <body> tag:soup.body.b# <b>The Dormouse's story</b>find()(and its convenience equivalent) gives you only thefirsttag
by that name:soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>If you need to getallthe <a> tags, you can usefind_all():soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]For more complicated tasks, such as pattern-matching and filtering, you can
use the methods described inSearching the tree..contentsand.children¶A tag's children are available in a list called.contents:head_tag=soup.headhead_tag# <head><title>The Dormouse's story</title></head>head_tag.contents# [<title>The Dormouse's story</title>]title_tag=head_tag.contents[0]title_tag# <title>The Dormouse's story</title>title_tag.contents# ['The Dormouse's story']TheBeautifulSoupobject itself has children. In this case, the
<html> tag is the child of theBeautifulSoupobject.:len(soup.contents)# 1soup.contents[0].name# 'html'A string does not have.contents, because it can't contain
anything:text=title_tag.contents[0]text.contents# AttributeError: 'NavigableString' object has no attribute 'contents'Instead of getting them as a list, you can iterate over a tag's
children using the.childrengenerator:forchildintitle_tag.children:print(child)# The Dormouse's storyIf you want to modify a tag's children, use the methods described inModifying the tree. Don't modify the the.contentslist
directly: that can lead to problems that are subtle and difficult to
spot..descendants¶The.contentsand.childrenattributes consider only a tag'sdirectchildren. For instance, the <head> tag has a single direct
child—the <title> tag:head_tag.contents# [<title>The Dormouse's story</title>]But the <title> tag itself has a child: the string "The Dormouse's
story". There's a sense in which that string is also a child of the
<head> tag. The.descendantsattribute lets you iterate overallof a tag's children, recursively: its direct children, the children of
its direct children, and so on:forchildinhead_tag.descendants:print(child)# <title>The Dormouse's story</title># The Dormouse's storyThe <head> tag has only one child, but it has two descendants: the
<title> tag and the <title> tag's child. TheBeautifulSoupobject
only has one direct child (the <html> tag), but it has a whole lot of
descendants:len(list(soup.children))# 1len(list(soup.descendants))# 26.string¶If a tag has only one child, and that child is aNavigableString,
the child is made available as.string:title_tag.string# 'The Dormouse's story'If a tag's only child is another tag, andthattag has a.string, then the parent tag is considered to have the same.stringas its child:head_tag.contents# [<title>The Dormouse's story</title>]head_tag.string# 'The Dormouse's story'If a tag contains more than one thing, then it's not clear what.stringshould refer to, so.stringis defined to beNone:print(soup.html.string)# None.stringsandstripped_strings¶If there's more than one thing inside a tag, you can still look at
just the strings. Use the.stringsgenerator to see all descendant
strings:forstringinsoup.strings:print(repr(string))'\n'# "The Dormouse's story"# '\n'# '\n'# "The Dormouse's story"# '\n'# 'Once upon a time there were three little sisters; and their names were\n'# 'Elsie'# ',\n'# 'Lacie'# ' and\n'# 'Tillie'# ';\nand they lived at the bottom of a well.'# '\n'# '...'# '\n'Newlines and spaces that separate tags are also strings. You can remove extra
whitespace by using the.stripped_stringsgenerator instead:forstringinsoup.stripped_strings:print(repr(string))# "The Dormouse's story"# "The Dormouse's story"# 'Once upon a time there were three little sisters; and their names were'# 'Elsie'# ','# 'Lacie'# 'and'# 'Tillie'# ';\n and they lived at the bottom of a well.'# '...'Here, strings consisting entirely of whitespace are ignored, and
whitespace at the beginning and end of strings is removed.Going up¶Continuing the "family tree" analogy, every tag and every string has aparent: the tag that contains it..parent¶You can access an element's parent with the.parentattribute. In
the example "three sisters" document, the <head> tag is the parent
of the <title> tag:title_tag=soup.titletitle_tag# <title>The Dormouse's story</title>title_tag.parent# <head><title>The Dormouse's story</title></head>The title string itself has a parent: the <title> tag that contains
it:title_tag.string.parent# <title>The Dormouse's story</title>The parent of a top-level tag like <html> is theBeautifulSoupobject
itself:html_tag=soup.htmltype(html_tag.parent)# <class 'bs4.BeautifulSoup'>And the.parentof aBeautifulSoupobject is defined as None:print(soup.parent)# None.parents¶You can iterate over all of an element's parents with.parents. This example uses.parentsto travel from an <a> tag
buried deep within the document, to the very top of the document:link=soup.alink# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>forparentinlink.parents:print(parent.name)# p# body# html# [document].self_and_parents¶The.self_and_parentsgenerator is a variant of.parentswhich
gives you the entire ancestry of an element, including the element
itself:forparentinlink.parents:print(parent.name)# link# p# body# html# [document]Going sideways¶Consider a simple document like this:sibling_soup=BeautifulSoup("<a><b>text1</b><c>text2</c></a>",'html.parser')print(sibling_soup.prettify())#   <a>#    <b>#     text1#    </b>#    <c>#     text2#    </c>#   </a>The <b> tag and the <c> tag are at the same level: they're both direct
children of the same tag. We call themsiblings. When a document is
pretty-printed, siblings show up at the same indentation level. You
can also use this relationship in the code you write..next_siblingand.previous_sibling¶You can use.next_siblingand.previous_siblingto navigate
between page elements that are on the same level of the parse tree:sibling_soup.b.next_sibling# <c>text2</c>sibling_soup.c.previous_sibling# <b>text1</b>The <b> tag has a.next_sibling, but no.previous_sibling,
because there's nothing before the <b> tagon the same level of the
tree. For the same reason, the <c> tag has a.previous_siblingbut no.next_sibling:print(sibling_soup.b.previous_sibling)# Noneprint(sibling_soup.c.next_sibling)# NoneThe strings "text1" and "text2" arenotsiblings, because they don't
have the same parent:sibling_soup.b.string# 'text1'print(sibling_soup.b.string.next_sibling)# NoneIn real documents, the.next_siblingor.previous_siblingof a
tag will usually be a string containing whitespace. Going back to the
"three sisters" document:# <a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,# <a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and# <a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;You might think that the.next_siblingof the first <a> tag would
be the second <a> tag. But actually, it's a string: the comma and
newline that separate the first <a> tag from the second:link=soup.alink# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>link.next_sibling# ',\n 'The second <a> tag is then the.next_siblingof the comma string:link.next_sibling.next_sibling# <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>.next_siblingsand.previous_siblings¶You can iterate over a tag's siblings with.next_siblingsor.previous_siblings:forsiblinginsoup.a.next_siblings:print(repr(sibling))# ',\n'# <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a># ' and\n'# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a># '; and they lived at the bottom of a well.'forsiblinginsoup.find(id="link3").previous_siblings:print(repr(sibling))# ' and\n'# <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a># ',\n'# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a># 'Once upon a time there were three little sisters; and their names were\n'(If the argument syntax to find tags by their attribute value is unfamiliar,
don't worry; this is covered later inThe keyword arguments.)Going back and forth¶Take a look at the beginning of the "three sisters" document:# <html><head><title>The Dormouse's story</title></head># <p class="title"><b>The Dormouse's story</b></p>An HTML parser takes this string of characters and turns it into a
series of events: "open an <html> tag", "open a <head> tag", "open a
<title> tag", "add a string", "close the <title> tag", "open a <p>
tag", and so on. The order in which the opening tags and strings are
encountered is calleddocument order. Beautiful Soup offers tools for
searching a document's elements in document order..next_elementand.previous_element¶The.next_elementattribute of a string or tag points to whatever
was parsed immediately after the opening of the current tag or after
the current string. It might be the same as.next_sibling, but it's
usually drastically different.Here's the final <a> tag in the "three sisters" document. Its.next_siblingis a string: the conclusion of the sentence that was
interrupted by the start of the <a> tag:last_a_tag=soup.find("a",id="link3")last_a_tag# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>last_a_tag.next_sibling# ';\nand they lived at the bottom of a well.'But the.next_elementof that <a> tag, the thing that was parsed
immediately after the <a> tag, isnotthe rest of that sentence:
it's the string "Tillie" inside it:last_a_tag.next_element# 'Tillie'That's because in the original markup, the word "Tillie" appeared
before that semicolon. The parser encountered an <a> tag, then the
word "Tillie", then the closing </a> tag, then the semicolon and rest of
the sentence. The semicolon is on the same level as the <a> tag, but the
word "Tillie" was encountered first.The.previous_elementattribute is the exact opposite of.next_element. It points to the opening tag or string that was
parsed immediately before this one:last_a_tag.previous_element# ' and\n'last_a_tag.previous_element.next_element# <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>.next_elementsand.previous_elements¶You should get the idea by now. You can use these iterators to move
forward or backward in the document as it was parsed:forelementinlast_a_tag.next_elements:print(repr(element))# 'Tillie'# ';\nand they lived at the bottom of a well.'# '\n'# <p class="story">...</p># '...'# '\n'