¶
The simplest way to navigate the parse tree is to find a tag by name. To
do this, you can use thefind()method:
find()
find()
soup.find("head")# <head><title>The Dormouse's story</title></head>
soup.find("head")# <head><title>The Dormouse's story</title></head>
soup.find("head")# <head><title>The Dormouse's story</title></head>

soup
.
find
(
"head"
)
# <head><title>The Dormouse's story</title></head>
For convenience, just saying the name of the tag you want is equivalent
tofind()(if no built-in attribute has that name). If you want the
<head> tag, just saysoup.head:
find()
find()
soup.head
soup.head
soup.head# <head><title>The Dormouse's story</title></head>soup.title# <title>The Dormouse's story</title>
soup.head# <head><title>The Dormouse's story</title></head>soup.title# <title>The Dormouse's story</title>
soup.head# <head><title>The Dormouse's story</title></head>soup.title# <title>The Dormouse's story</title>

soup
.
head
# <head><title>The Dormouse's story</title></head>
soup
.
title
# <title>The Dormouse's story</title>
You can use this trick again and again to zoom in on a certain part
of the parse tree. This code gets the first <b> tag beneath the <body> tag:
soup.body.b# <b>The Dormouse's story</b>
soup.body.b# <b>The Dormouse's story</b>
soup.body.b# <b>The Dormouse's story</b>

soup
.
body
.
b
# <b>The Dormouse's story</b>
find()(and its convenience equivalent) gives you only thefirsttag
by that name:
find()
find()
first
soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>
soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>
soup.a# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>

soup
.
a
# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>
If you need to getallthe <a> tags, you can usefind_all():
all
find_all()
find_all()
soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all('a')# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup
.
find_all
(
'a'
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
For more complicated tasks, such as pattern-matching and filtering, you can
use the methods described inSearching the tree.
Searching the tree
.contentsand.children¶A tag's children are available in a list called.contents:head_tag=soup.headhead_tag# <head><title>The Dormouse's story</title></head>head_tag.contents# [<title>The Dormouse's story</title>]title_tag=head_tag.contents[0]title_tag# <title>The Dormouse's story</title>title_tag.contents# ['The Dormouse's story']TheBeautifulSoupobject itself has children. In this case, the
<html> tag is the child of theBeautifulSoupobject.:len(soup.contents)# 1soup.contents[0].name# 'html'A string does not have.contents, because it can't contain
anything:text=title_tag.contents[0]text.contents# AttributeError: 'NavigableString' object has no attribute 'contents'Instead of getting them as a list, you can iterate over a tag's
children using the.childrengenerator:forchildintitle_tag.children:print(child)# The Dormouse's storyIf you want to modify a tag's children, use the methods described inModifying the tree. Don't modify the the.contentslist
directly: that can lead to problems that are subtle and difficult to
spot.