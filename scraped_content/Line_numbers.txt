¶
Thehtml.parserandhtml5libparsers can keep track of where in
the original document eachTagwas found. You can access this
information asTag.sourceline(line number) andTag.sourcepos(position of the start tag within a line):
html.parser
html.parser
html5lib
html5lib
Tag
Tag
Tag
Tag.sourceline
Tag.sourceline
Tag.sourcepos
Tag.sourcepos
markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (1, 0, 'Paragraph 1')# (3, 4, 'Paragraph 2')
markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (1, 0, 'Paragraph 1')# (3, 4, 'Paragraph 2')
markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (1, 0, 'Paragraph 1')# (3, 4, 'Paragraph 2')

markup
=
"<p
\n
>Paragraph 1</p>
\n
<p>Paragraph 2</p>"
soup
=
BeautifulSoup
(
markup
,
'html.parser'
)
for
tag
in
soup
.
find_all
(
'p'
):
print
(
repr
((
tag
.
sourceline
,
tag
.
sourcepos
,
tag
.
string
)))
# (1, 0, 'Paragraph 1')
# (3, 4, 'Paragraph 2')
Note that the two parsers mean slightly different things bysourcelineandsourcepos. For html.parser, these numbers
represent the position of the initial less-than sign. For html5lib,
these numbers represent the position of the final greater-than sign:
sourceline
sourceline
sourcepos
sourcepos
soup=BeautifulSoup(markup,'html5lib')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (2, 0, 'Paragraph 1')# (3, 6, 'Paragraph 2')
soup=BeautifulSoup(markup,'html5lib')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (2, 0, 'Paragraph 1')# (3, 6, 'Paragraph 2')
soup=BeautifulSoup(markup,'html5lib')fortaginsoup.find_all('p'):print(repr((tag.sourceline,tag.sourcepos,tag.string)))# (2, 0, 'Paragraph 1')# (3, 6, 'Paragraph 2')

soup
=
BeautifulSoup
(
markup
,
'html5lib'
)
for
tag
in
soup
.
find_all
(
'p'
):
print
(
repr
((
tag
.
sourceline
,
tag
.
sourcepos
,
tag
.
string
)))
# (2, 0, 'Paragraph 1')
# (3, 6, 'Paragraph 2')
You can shut off this feature by passingstore_line_numbers=Falseinto theBeautifulSoupconstructor:
store_line_numbers=False
store_line_numbers=False
BeautifulSoup
BeautifulSoup
markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser',store_line_numbers=False)print(soup.p.sourceline)# None
markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser',store_line_numbers=False)print(soup.p.sourceline)# None
markup="<p\n>Paragraph 1</p>\n<p>Paragraph 2</p>"soup=BeautifulSoup(markup,'html.parser',store_line_numbers=False)print(soup.p.sourceline)# None

markup
=
"<p
\n
>Paragraph 1</p>
\n
<p>Paragraph 2</p>"
soup
=
BeautifulSoup
(
markup
,
'html.parser'
,
store_line_numbers
=
False
)
print
(
soup
.
p
.
sourceline
)
# None
This feature is new in 4.8.1, and the parsers based on lxml don't
support it.
This feature is new in 4.8.1, and the parsers based on lxml don't
support it.
Comparing objects for equality¶Beautiful Soup says that twoNavigableStringorTagobjects
are equal when they represent the same HTML or XML markup, even if their
attributes are in a different order or they live in different parts of the
object tree. In this example, the two <b> tags are treated as equal, because
they both look like "<b>pizza</b>":markup="<p>I want <b>pizza</b> and more <b>pizza</b>!</p>"soup=BeautifulSoup(markup,'html.parser')first_b,second_b=soup.find_all('b')print(first_b==second_b)# Trueprint(first_b.previous_element==second_b.previous_element)# FalseIf you want to see whether two variables refer to exactly the same
object, useis:print(first_bissecond_b)# False