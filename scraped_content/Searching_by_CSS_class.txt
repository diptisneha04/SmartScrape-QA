¶
It's very useful to search for a tag that has a certain CSS class, but
the name of the CSS attribute, "class", is a reserved word in
Python. Usingclassas a keyword argument will give you a syntax
error. As of Beautiful Soup 4.1.2, you can search by CSS class using
the keyword argumentclass_:
class
class
class_
class_
soup.find_all("a",class_="sister")# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all("a",class_="sister")# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all("a",class_="sister")# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup
.
find_all
(
"a"
,
class_
=
"sister"
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
As with any keyword argument, you can passclass_a string, a regular
expression, a function, orTrue:
class_
class_
True
True
soup.find_all(class_=re.compile("itl"))# [<p class="title"><b>The Dormouse's story</b></p>]defhas_six_characters(css_class):returncss_classisnotNoneandlen(css_class)==6soup.find_all(class_=has_six_characters)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all(class_=re.compile("itl"))# [<p class="title"><b>The Dormouse's story</b></p>]defhas_six_characters(css_class):returncss_classisnotNoneandlen(css_class)==6soup.find_all(class_=has_six_characters)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all(class_=re.compile("itl"))# [<p class="title"><b>The Dormouse's story</b></p>]defhas_six_characters(css_class):returncss_classisnotNoneandlen(css_class)==6soup.find_all(class_=has_six_characters)# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup
.
find_all
(
class_
=
re
.
compile
(
"itl"
))
# [<p class="title"><b>The Dormouse's story</b></p>]
def
has_six_characters
(
css_class
):
return
css_class
is
not
None
and
len
(
css_class
)
==
6
soup
.
find_all
(
class_
=
has_six_characters
)
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
Rememberthat a single tag can have multiple
values for its "class" attribute. When you search for a tag that
matches a certain CSS class, you're matching againstanyof its CSS
classes:
Remember
Remember
any
css_soup=BeautifulSoup('<p class="body strikeout"></p>','html.parser')css_soup.find_all("p",class_="strikeout")# [<p class="body strikeout"></p>]css_soup.find_all("p",class_="body")# [<p class="body strikeout"></p>]
css_soup=BeautifulSoup('<p class="body strikeout"></p>','html.parser')css_soup.find_all("p",class_="strikeout")# [<p class="body strikeout"></p>]css_soup.find_all("p",class_="body")# [<p class="body strikeout"></p>]
css_soup=BeautifulSoup('<p class="body strikeout"></p>','html.parser')css_soup.find_all("p",class_="strikeout")# [<p class="body strikeout"></p>]css_soup.find_all("p",class_="body")# [<p class="body strikeout"></p>]

css_soup
=
BeautifulSoup
(
'<p class="body strikeout"></p>'
,
'html.parser'
)
css_soup
.
find_all
(
"p"
,
class_
=
"strikeout"
)
# [<p class="body strikeout"></p>]
css_soup
.
find_all
(
"p"
,
class_
=
"body"
)
# [<p class="body strikeout"></p>]
You can also search for the exact string value of theclassattribute:
class
class
css_soup.find_all("p",class_="body strikeout")# [<p class="body strikeout"></p>]
css_soup.find_all("p",class_="body strikeout")# [<p class="body strikeout"></p>]
css_soup.find_all("p",class_="body strikeout")# [<p class="body strikeout"></p>]

css_soup
.
find_all
(
"p"
,
class_
=
"body strikeout"
)
# [<p class="body strikeout"></p>]
But searching for variants of the string value won't work:
css_soup.find_all("p",class_="strikeout body")# []
css_soup.find_all("p",class_="strikeout body")# []
css_soup.find_all("p",class_="strikeout body")# []

css_soup
.
find_all
(
"p"
,
class_
=
"strikeout body"
)
# []
In older versions of Beautiful Soup, which don't have theclass_shortcut, you can use theattrsargument trick mentioned above.
Create a dictionary whose value for "class" is the string (or regular
expression, or whatever) you want to search for:
class_
class_
attrs
attrs
soup.find_all("a",attrs={"class":"sister"})# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all("a",attrs={"class":"sister"})# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
soup.find_all("a",attrs={"class":"sister"})# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

soup
.
find_all
(
"a"
,
attrs
=
{
"class"
:
"sister"
})
# [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
#  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
#  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]
To search for tags that match two or more CSS classes at once, use theTag.select()CSS selector methoddescribed here:
Tag.select()
Tag.select()
described here
described here
css_soup.select("p.strikeout.body")# [<p class="body strikeout"></p>]
css_soup.select("p.strikeout.body")# [<p class="body strikeout"></p>]
css_soup.select("p.strikeout.body")# [<p class="body strikeout"></p>]

css_soup
.
select
(
"p.strikeout.body"
)
# [<p class="body strikeout"></p>]
Thestringargument¶With thestringargument, you can search for strings instead of tags. As
withnameand attribute keyword arguments, you can pass ina string,a
regular expression,a function,a list, orthe value True.
Here are some examples:soup.find_all(string="Elsie")# ['Elsie']soup.find_all(string=["Tillie","Elsie","Lacie"])# ['Elsie', 'Lacie', 'Tillie']soup.find_all(string=re.compile("Dormouse"))# ["The Dormouse's story", "The Dormouse's story"]defis_the_only_string_within_a_tag(s):"""Return True if this string is the only child of its parent tag."""return(s==s.parent.string)soup.find_all(string=is_the_only_string_within_a_tag)# ["The Dormouse's story", "The Dormouse's story", 'Elsie', 'Lacie', 'Tillie', '...']If you use thestringargument in a tag search, Beautiful Soup will find
all tags whose.stringmatches your value forstring. This code finds
the <a> tags whose.stringis "Elsie":soup.find_all("a",string="Elsie")# [<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>]Thestringargument is new in Beautiful Soup 4.4.0. In earlier
versions it was calledtext:soup.find_all("a",text="Elsie")# [<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>]
